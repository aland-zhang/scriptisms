#!/bin/bash

# Command-line
[ $# -lt 2 -o "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} [<option> ...] <source-dir> <destination-dir>

SYNOPSIS:
  Copy Skyguide eVFR Manual to the given destination directory, converting
  all PDF files to PNG images for easier/faster browsing.
  This script is "thread-safe", meaning that it can be executed concurrently
  with the same arguments in order to benefit from multiple CPUs/cores.

OPTIONS:
  -v, --version <YYMMDD>
    eVFR Manual version [default:latest]

  -d, --output-dpi <int>
    Output PNG images resolution (DPI) [default:120]

  -s, --size <int>
  -sx, --size-x <int>
  -sy, --size-y <int>
    Output PNG images maximum width/height (pixels) [default:height=1000]

  -p, --include-pdf
    Include original PDF file along the HTML/PNG output

  -cs, --charset <string>
    Filesystem character encoding [default:UTF-8]

  -nf, --no-frameset
    Do not use FRAMESET in generated HTML

  -h, --html-template
    HTML template used to replace the PDF file
    Any included '%FILE%', '%ID%' and '%PAGES%' anchors will be replaced
    with the approriate corresponding values.
    If not specified, the built-in template will be used.

  -l, --lean-ui
    Use custom 'left-hand' HTML for a leaner user-interface

  -z, --gzip <dir>
    Destination directory for .tar.gz archive

  -j, --bzip2 <dir>
    Destination directory for .tar.bz2 archive

  -a, --apk <dir>
    Destination directory for .apk (Android) archive

  --android-sdk <dir>
    Path to the Android SDK

  --android-keystore <file>
    Path to your keystore (optional)

  --android-keyalias <string>
    Alias of your signing key (optional)

AUTHOR:
  Cedric Dufour - http://cedric.dufour.name
EOF

# Arguments
VERSION=
IMG_DPI=120
IMG_X=
IMG_Y=1000
PDF_INCL=
CHARSET='UTF-8'
HTML_NOFRM=
HTML_TMPL=
HTML_LEAN=
SRC_DIR=
DST_DIR=
BZ2_DIR=
GZ_DIR=
APK_DIR=
APK_SDK=
APK_KEYSTORE=
APK_KEYALIAS=
while [ -n "${1}" ]; do
  case "${1}" in
    '-v'|'--version')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--version)' >&2 && exit 1; VERSION="${1}";;
    '-d'|'--output-dpi')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--output-dpi)' >&2 && exit 1; IMG_DPI="${1}";;
    '-s'|'--size')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-s)' >&2 && exit 1; IMG_X="${1}"; IMG_Y="${1}";;
    '-sx'|'--size-x')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-sx)' >&2 && exit 1; IMG_X="${1}";;
    '-sy'|'--size-y')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-sx)' >&2 && exit 1; IMG_Y="${1}";;
    '-p'|'--include-pdf')
      PDF_INCL='yes';;
    '-cs'|'--charset')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--charset)' >&2 && exit 1; CHARSET="${1}";;
    '-nf'|'--no-frameset')
      HTML_NOFRM='yes';;
    '-h'|'--html-template')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--html-template)' >&2 && exit 1; HTML_TMPL="${1}";;
    '-l'|'--lean-ui')
      HTML_LEAN='yes';;
    '-z'|'--gzip')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--gzip)' >&2 && exit 1; GZ_DIR="${1}";;
    '-j'|'--bzip2')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--bzip2)' >&2 && exit 1; BZ2_DIR="${1}";;
    '-a'|'--apk')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--apk)' >&2 && exit 1; APK_DIR="${1}";;
    '--android-sdk')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-sdk)' >&2 && exit 1; APK_SDK="${1}";;
    '--android-keystore')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-keystore)' >&2 && exit 1; APK_KEYSTORE="${1}";;
    '--android-keyalias')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-keyalias)' >&2 && exit 1; APK_KEYALIAS="${1}";;
    *)
      if [ -z "${SRC_DIR}" ]; then SRC_DIR="${1}"
      elif [ -z "${DST_DIR}" ]; then DST_DIR="${1}"
      else echo 'ERROR: Invalid (extra) argument (${1})' >&2 && exit 1
      fi
      ;;
  esac
  shift
done

# Check dependencies
[ -z "$(which pdf2html)" ] && echo "ERROR[$$]: 'pdf2html' cannot be found" >&2 && exit 1
[ -z "$(which uudecode)" ] && echo "ERROR[$$]: 'uudecode' cannot be found" >&2 && exit 1

# Check directories
SRC_DIR=${SRC_DIR%%/}
[ ! -d "${SRC_DIR}" ] && echo "ERROR[$$]: Invalid source directory (${SRC_DIR})" >&2 && exit 1
[ ! -r "${SRC_DIR}" ] && echo "ERROR[$$]: Unable to read from source directory (${SRC_DIR})" >&2 && exit 1
[ ! -d "${DST_DIR}" ] && echo "ERROR[$$]: Invalid destination directory (${DST_DIR})" >&2 && exit 1
[ ! -w "${DST_DIR}" ] && echo "ERROR[$$]: Unable to write to destination directory (${DST_DIR})" >&2 && exit 1
pushd "${DST_DIR}" >/dev/null || exit 1
DST_DIR="$(pwd)"
popd >/dev/null || exit 1
DST_DIR=${DST_DIR%%/}

# Check/retrieve version
[ -z "${VERSION}" ] && VERSION="$(find "${SRC_DIR}" -maxdepth 1 -type d -name "??????" | sed 's/^.*\///' | sort -rn | head -n 1)"
[ -z "${VERSION}" ] && echo "ERROR[$$]: Unable to retrieve (latest) version" >&2 && exit 1
SRC_DIR_VER="${SRC_DIR}/${VERSION}"
[ ! -d "${SRC_DIR_VER}" ] && "ERROR[$$]: Invalid version directory (${SRC_DIR_VER})" >&2 && exit 1
[ ! -r "${SRC_DIR_VER}" ] && echo "ERROR[$$]: Unable to read from version directory (${SRC_DIR_VER})" >&2 && exit 1
[ ! -e "${SRC_DIR_VER}/index.html" ] && echo "ERROR[$$]: Missing 'index.html' file in version directory (${SRC_DIR_VER})" >&2 && exit 1
[ ! -e "${SRC_DIR_VER}/Full" ] && echo "ERROR[$$]: Missing 'Full' (AIP) directory in version directory (${SRC_DIR_VER})" >&2 && exit 1
[ ! -e "${SRC_DIR_VER}/VFG" ] && echo "ERROR[$$]: Missing 'VFG' (VFR Guide) directory in version directory (${SRC_DIR_VER})" >&2 && exit 1
DST_DIR_VER="${DST_DIR}/${VERSION}"

# Lock function
DST_LOCK="${DST_DIR}/.lock"
function atomic_begin {
  n=100; while true; do # loop for ~5 seconds (100 x 0.05 seconds in average)
    n=$(( ${n}-1 ))
    [ ${n} -le 0 ] && echo "ERROR[$$]: Failed to acquire lock (${DST_LOCK})" >&2 && exit 1
    [ $(( ${n} % 10 )) -eq 0 ] && echo "WARNING[$$]: Waiting for lock (${DST_LOCK})" >&2
    if ( set -o noclobber; echo -n > "${DST_LOCK}" ) 2>/dev/null; then
      break
    fi
    sleep 0.0$(( ${RANDOM} % 10 ))
  done
}
function atomic_end {
  rm -f "${DST_LOCK}"
}

# Trap signals
trap 'echo "INTERRUPT[$$]: Cleaning and aborting" >&2; rm -f "${DST_LOCK}" "${p_dst}"; exit 2' INT TERM

# Loop through files 
IFS=$'\n'; for p_src in $(find "${SRC_DIR}" -path "${SRC_DIR_VER}/*" -type f | sort); do

  # Compute destination file name
  e_src="${p_src##*.}"
  case "${e_src}" in
    'p7s') continue;;
    *) p_dst="${p_src}";;
  esac
  p_dst="${DST_DIR}/${p_dst#${SRC_DIR}/}"

  # Compute destination file name (cont'd)
  f_src="$(basename ${p_src})"
  d_dst="$(dirname ${p_dst})"
  f_dst="$(basename ${p_dst})"

  # Ignore irrelevant files
  [ "${f_src}" == 'EntireVFRM.zip' ] && continue
  [ "${f_src}" == 'Thumbs.db' ] && continue

  # Check/create destination directory
  [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
  [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
  [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

  # Check destination file
  atomic_begin
  [ -e "${p_dst}" ] && atomic_end && continue
  touch "${p_dst}"
  atomic_end

  # Import
  echo "INFO[$$]: Importing ${p_src} -> ${p_dst}"
  case "${e_src}" in
    'pdf'|'PDF')
      pdf2html -d ${IMG_DPI} ${IMG_X:+-sx} ${IMG_X:+${IMG_X}} ${IMG_Y:+-sy} ${IMG_Y:+${IMG_Y}} ${PDF_INCL:+-p} ${CHARSET:+-cs} ${CHARSET:+${CHARSET}} ${HTML_NOFRM:+-nf} ${HTML_TMPL:+-h} ${HTML_TMPL:+${HTML_TMPL}} "${p_src}" "${d_dst}"
      ;;
    *)
      cp "${p_src}" "${p_dst}"
      ;;
  esac
    
done

# Finalize
atomic_begin
if [ ! -e "${DST_DIR}/index.html" ]; then
  touch "${DST_DIR}/index.html"
  atomic_end

  echo "INFO[$$]: Add version to cover page..."
  sed -i "s|\\(Aeronautical Information Publication\\)|\\1\\n<br>Version: ${VERSION}|i" "${DST_DIR_VER}/html/cover.html"

  echo "INFO[$$]: Fixing broken links..."
  sed -i 's|href="../../../index.html" target="_top"|href="http://www.skyguide.ch/" target="_top"|' "${DST_DIR_VER}/html/commands.html"

  echo "INFO[$$]: Fixing browsing menus..."
  find "${DST_DIR}" -name 'tree_items_*.js' -exec sed -i 's/\.pdf/.html/g' {} \;

  echo "INFO[$$]: Creating top-level index..."
  cat << EOF > "${DST_DIR}/index.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="Refresh" CONTENT="0; url=./${VERSION}/index.html" />
</HEAD>
</HTML>
EOF

  if [ -n "${HTML_LEAN}" ]; then
    echo "INFO[$$]: Creating lean index..."

    # Remove "commands" frame
    cat << EOF > "${DST_DIR_VER}/index.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
<TITLE>eVFR Manual (${VERSION})</title>
</HEAD>
<FRAMESET COLS="200,*">
<FRAMESET ROWS="23,*" BORDER="0">
<FRAME NAME="menu" ID="menu" SRC="./html/menu.html" NORESIZE SCROLLING="no" FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
<FRAME NAME="navigation" ID="navigation" SRC="./html/navigation.html" NORESIZE FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
</FRAMESET>
<FRAME NAME="VfrmMain" ID="VfrmMain" SRC="./html/cover.html" FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
</FRAMESET>
</HTML>
EOF

    # Make navigation tree less space-wasting
    sed -i 's|min-width:[^;]*|width:200px|i;s|font-family:[^;]*|font-family:sans-serif|i;s|font-size:[^;]*|font-size:10px|i' "${DST_DIR_VER}/styles/navigation.css"

    # Allow wraping in navigation tree
    sed -i 's| *nowrap||i' "${DST_DIR_VER}/scripts/tree.js"

    # Replace space-wasting icons by smaller ones
    for image in folder.gif folderopen.gif foldersel.gif page.gif pagesel.gif join.gif joinbottom.gif line.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhAgABAIABAAAAAP///yH5BAEKAAEALAAAAAACAAEAAAICTAoAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in plus.gif plusbottom.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhDQARAKECAF5bTAAAAP///////yH5BAEAAAIALAAAAAANABEAAAIi
lI+py+0PEZiUygWuCSf3wxmeKASmKYwp+LWluypqRUdRAQA7
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in minus.gif minusbottom.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhDQARAKECAF5bTAAAAP///////yH5BAEAAAIALAAAAAANABEAAAId
lI+py+1/gJwTgXUjtluH/wmZMXKaUpYnSVHQCxcAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in empty.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCwABAIABAAAAAP///yH5BAEKAAEALAAAAAALAAEAAAIDjI9RADs=
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in page.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCQARAIABAAAAAP///yH5BAEKAAEALAAAAAAJABEAAAIRjI+py+3f
gEzgVItzuHbC/xUAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in pagesel.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCQARAIABAAAAAP///yH5BAEKAAEALAAAAAAJABEAAAIRjI+py+3f
gEyyojoPBjTDDxUAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
  fi

  echo "INFO[$$]: Tagging folder as non-media content for Android"
  touch "${DST_DIR}/.nomedia"
fi
atomic_end

# Gzip archive
if [ -n "${GZ_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${GZ_DIR}"; do
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

    # Create archive
    p_dst="${d_dst}/eVFRManual-${VERSION}.tar.gz"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."
      tar -C "${DST_DIR}" -czf "${p_dst}" .
    fi
    atomic_end
  done
fi

# Bzip2 archive
if [ -n "${BZ2_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${BZ2_DIR}"; do
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

    # Create archive
    p_dst="${d_dst}/eVFRManual-${VERSION}.tar.bz2"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."
      tar -C "${DST_DIR}" -cjf "${p_dst}" .
    fi
    atomic_end
  done
fi

# APK archive
if [ -n "${APK_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${APK_DIR}"; do
    # Check Android SDK
    [ -z "${APK_SDK}" -o ! -d "${APK_SDK}/platform-tools" ] && echo "WARNING[$$]: Missing/invalid Android SDK directory (${APK_SDK}); skipping..." >&2 && continue
    pushd "${APK_SDK}" >/dev/null || continue
    APK_SDK="$(pwd)"
    popd >/dev/null || continue
    APK_SDK="${APK_SDK%%/}"
    APK_PLATFORM="$(ls -1d "${APK_SDK}"/platforms/* | sort -V | tail -n 1)"
    [ -z "${APK_PLATFORM}" ] && echo "WARNING[$$]: Cannot find Android SDK platform (${APK_SDK}/platforms/...); skipping..." >&2 && continue
    APK_TOOLS="$(ls -1d "${APK_SDK}"/build-tools/* | sort -V | tail -n 1)"
    [ -z "${APK_TOOLS}" ] && echo "WARNING[$$]: Cannot find Android SDK build tools (${APK_SDK}/build-tools/...); skipping..." >&2 && continue
    
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue
    pushd "${d_dst}" >/dev/null || continue
    d_dst="$(pwd)"
    popd >/dev/null || continue
    d_dst="${d_dst%%/}"

    # Check keystore
    [ -n "${APK_KEYSTORE}" -a ! -r "${APK_KEYSTORE}" ] && echo "WARNING[$$]: Missing/unreadable keystore (${APK_KEYSTORE}); skipping..." >&2 && continue

    p_dst="${d_dst}/eVFRManual-${VERSION}.apk"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."

      # Create temporary project directory
      d_tmp="/tmp/${0##*/}.$$"
      [ ! -d "${d_tmp}" ] && mkdir -p "${d_tmp}"
      [ ! -d "${d_tmp}" ] && echo "WARNING[$$]: Failed to create project directory (${d_tmp}); skipping..." >&2 && continue
      [ ! -w "${d_tmp}" ] && echo "WARNING[$$]: Unable to write to project directory (${d_tmp}); skipping..." >&2 && continue

      # Build Android archive
      pushd "${d_tmp}" >/dev/null || continue
      for n in 1; do
        cat << END_OF_BASE64_ENCODED_DATA | uudecode | tar -xJ
begin-base64 644 /dev/stdout
/Td6WFoAAATm1rRGAgAhARYAAAB0L+Wj4O//ZMldACCbiIdV+BJa3TTCBGfS
NXHtFUrO3bbudj51A0IwrRjzUjryeE/Io3vhZ2NigMbij7SnFGq+tNv/sN2B
h/CM5Fh5yE51rP0Hcn8GMQ62Xcx+4RwrBSR9umOVT6jqtMhfEChR0cIsCwD6
DA1Op9emp10Nox8Yn3q1NGxvunAH9xByztoZgiplzDMY2r693WnocGJbEYmy
uDbSmtyt6/ELlU6/iuKbhKx8xU7sOMmsapD3EUwhVq7V8tXZQuaQV9cFUUdd
MtSpLzBbU6vi9ouUmK6RbLBNvBSEp3ExT/fcBgOUvePgHR2ye2/IVYi048Gn
hKPCDvY71pCgdAUC5ERQd7Q7pzajlX5ktKoCqEb6BGgd2mpmkBHSaLSQmlFR
mV5V+VRNTBliu6pbySC9O36YLD2vghzop0gKlOMtyPJVorcQRhs35s5z5NH3
qn6n2b9j9XCvjx3b2itGnE1AgOdT7MilsJ9tnoVGjqx/KyOvhEu1Vm42t2PM
CapFsKFIyABOI9m8hJ7tyBXema+CzQVQeXjIeLLkUFXKXQOvvsz4XK9OHOXD
fj+u8AfNNjmW3yx7R9uCuQcgj4FJa/3gpY95/GwYj8F0LgkVo73JIjJA1foU
T6RXAvHg6puPVg+vopCe9Fw0hS6ioqoCNqb+RyQKN2/UN3OkovWpC1QQQe6S
Nerw+aVfY8bCDe9rTPWytROkTEFqJGjIQ8TjwTLyZuYK0S0Xwy6SIiRmvq41
8P3cmtuP0MKKuAVQj4mjODYYHPxsjxYpbRrOPdC20NjpBp4jaRr5xLz8eS6e
nkvQPLgI8+EPHM/6/gC5O2PQHqrPiqqwd7RL6YrIhcXEC/yfTA/8fEY7ZfjY
tCXtQuVtEqo7asuwN6+9EYXTMUccRPTZNd/XlqIT/7xXBFM/68bZ1yRl5nxj
r3gLBp0WpBPSqW1w/NJfUE8fSFjKOtBbkTrd4VoTpPF8BUitsbHK8A1yD0x5
onzhs/COV7naoZj51qWWoXkgkFjD2Or1e2eOk4CfcA8B3yOAOkTjbY0DBYZD
RwVD1yT571bjjo5RSOy8Tdj3o8AV+BdVzwy1ZRHtNgDj3c9MJSSm29JvJcHh
f2AlfEf3ZjdNLJnTHiYC7fy7xBIZvo7FyWscZ2MiYK+1V+tylpTkj2NAWclk
slzV4Af2YVSDwzVlnyz207QkG0FiOnKw6U6g5c5t3FtgD8hNrTW0To4H5giq
ms3QfmmeaojmG3m98AGuuaFmSAkkEXDicsyIWG4l34R8ZGUqRifxyfNGQZl8
U0e8Ca7iHQET4+qqJYgAi4LbYXTC/XWlBml8CO2yAj4bAmfBw4xGujhQxNGP
Uvo3pNdSaa1eWdXWF5YHICipWUElBlS9y2U6rg1zcMrhNAuAuFa7u9DnNtsn
+OFzIp2Cow3mUMKjIa9RMgCT5QREXNQYtREyHoO4TjMhc/qbFTB2d2l6XvOt
WGIKfSlDUff0jFAYWqgVYlPJLko7QDrf4Y1lqIuFHqSdvkruK7ppMsPIGQ3T
TzL52rnnZgoSNFT1WlPvYa55J7kPs7DfBa3ck+KCm8yeA8/rJo8Hl7khEpAH
EXKpUzs6C3X2jKRe2l+8IgFSqPc9CAKH9UANYSrv+XLFxdUv/K0tva/jBNDe
cTKm4ijElvtY5OBREy2e7VF6i1t27iyM0DGEug5j5m+2zt1UngPlqYfUs95a
Bx6xxaXTus8RhTIY33VIU9/HrPYHq3OC04lJENC1xkJG1DuICEhMDD+kbs5I
nFbn15SQHE2oyP7D6ozS6ghH0Iv/GYnDU2EtyDNWOqhs65le36jqUpr+VLEm
+4UDZPwuM+8bZYSWLUAMGWbOW7xzI8mMZ9FaizR1+zua/IJan3BCyN7mOffp
feZifGCdMBYcfvuQXb9lkcNeoFhYBnxjfKfMB+iDvg8nMHh0eutGXWzyRNd1
TtT0lqpg9OnH2grUlv3yc4w/crqbkwxY0+GqYku4RYuFD2BZ3jaKmtzMb8Gv
3kbUCYRnkfXDaQsp/T1Y24dFNM/hXU2zmUOFmO1Ix2NMMxc18dLxWuQaCwdK
jm0HtV5C/O8OCgFjj44+bDtBmS0SdK/kS2iiBLNcFxG7zQcs/7v7hnIXXah0
pEZRDWRHYkuj4M5cT8oKsMxYreLOXgRG4BzK5hNgQ/1r1RQaZPzF/znqjia7
Qbu7mah4nKXffqP8BUssEF2Qoks/5ba3iV6N14tx6tYqvLv30np75aPE/mRq
DZGUhfpv4Bt+OT/ua5aGNEyp1EKvOP3G53K2NZ+OhTTpNRCslA0WPp8LV1Z8
VjkxZCB30jx0fglAvPCU+efhVuC0ddkFJn2TegfTRHVJjTFJzn9lrGQYlHS1
30dOcF5MxbGXxbBmfxkGq6CoTkgfO7bgZ05GlVZC+oimqzxhP2+etLkHBbXU
6Yyi5pTLojYmkVUM4FKE9/mOGK7TVBGhLHz7G/0oL5G5izf0zV3wzd//BA3m
rcSFQa60mIDisHW4SVjqkDZWqa3vGgZda4EyUkc4rvwEvFlV/3tI6QCCd9u7
ezGLnNSoSWO++bEGzIvvMoFTLsCaNzEtn0t92vBs0UGlQEwq5hpjIedEJGem
Bpij13fR9/uNzuQp++b71ITk9rkVx+n4H/25edx2YSAZEcUf6ePhjRrKu4Hk
cMcVZrj+sc4hGpVg/dL1zPyRa9kaJ12k9clG5nLrpEFiOZRF9QjzHi078djB
p/tc2KuZNKjuJHhQTE1PcAyM/ktD+IJJrp//v1CBo6phk8N3oEATxto9skfe
Vh39fI5u9OD6icH1XekhkT5dwDEIwbUrElVoAwVsRFiHCXQHeoXWI+jHNc2d
rrwfr2smFf9ZVoh+95ZsijJY+cCy2DCBT3ZkSlxdnvAPdgla8EVlbh7vIPPw
EmtvnjOKsMzYvHbssxta3G1Ez/IZmS3n4HwsstpQyTXYZzolTAomDxKa+AX+
2IenFm1z+1XFGywxynFEBTZRwhfcRBEAR9rwjWpdvfC2Z33DY757oIbYwLMM
ENNxQeh8sxF42NWMfPjFWEOsRvGRUf2Isn6lInG8vKMwc0EChBN95Q3LpenL
kfox4kSdjm6i8YnQYrAnoRrjhuEEk/wzZc1WOCVuKCpNXwKK4O7QFC3UUQVa
7wUJkx+yJppAHeULpt2otrn5mtxfjnvhlIDZHNss6xvhhsckRT/ovrvTcmnk
jhTfCWFlQk/Ov5lbrXy4mYvIeBzNr1lHyowgmRFScTuqsVXUMvE0FFRTr8NI
c2oUlfmGEAHXXnjG3ipBM49d93wDKnQCQB5kkBpEv5ScJUFvzJuCbNXkI2WQ
JAB34t7KFXOUDoxRCPpBCvtGXrmO1cyjUU4f6FugmHEGqASDTJ/OO1Ja3Imq
xT8XjNAC3X3g+REAZGwLHJBbkleXlKyW6MxhOquMRhVIG2WaVpwCfr1myP9t
AXdYPRcvkAamcRe5Cg0YggPi3cG1tTfxLk0q4yMtW0+WV+zWD/VulEtUi/BS
WrEuolyZeneAo5ZKVEcjdVaZ0+bV4ARm0U81Lfjx7vTtMh81BbdENnw52HAB
KXqprHa1GGXF4wjrdDWgI1bb+TW9nCcQpBZ4Dd/0wuTUltj4m+VADShy+EXW
1NHC7xMLKa4jaOEkJSSdMXd7lROkEgJvgSgOttXAXRjwPwYhKfgeVzNvH/c4
EGxe9ttEzhxpIxlEVNnKdCH2Mr95ETB7GkdSfEWkTvlc9Pqr50RE19YrJ8uY
SmyTl+0u6hlevIoTRKt3sV3tpKsVlr26JA4/6PBU0EbvFrB/fYeJRZli0rgT
daAT7OlpyCCqNoUekFjFZyTVGa3PGSNmOjsIah2e2y4p4YeJx9CJZBsHeXyX
DC3kxW0rVgU4jHbrom64IXVl+8NWFqKFNpE52cfJRN4tG39+n4XNwoMEYUVA
BeQpYP3IRdg6DYp2AjBsxYyqVyLkFCrkXnHIq80pNzj/oCLdsvuBwxMhU64N
iGc21yhZMK8ccIMeAl+jZuF0ZCHkP07qsu0fVEkkCmyLYJnfu3rYppykJAVn
zDk64flthlASBv5eYWIJrTxtSCGDYJ8c6D3xWxHv39ZBDHK317GDG0cA1e23
3yXqcHlPNYtjI64OSW0fL1LHLD8wjoS+uOk80pvSvCIGJI7deQ85K361i2Wg
PG9NjJDI9MmzwamNGQH/5qEfzGTzONHPslQngoUNA9gjoh46I/8l1qb0CtjA
6PMJ7NTRy5VQJg7oz3fQGDBAliXGLlc9InnEQeTz2AFeOb8qnlg+jmw81pNB
MGYBBojxVmmVgS1+2HaenahPQTPNoB2jKR1HLIRVLIj/XqDlq87aPeC0lv++
HpY33F2n/patJjdPQ6MZUgU64oIrYfFKv2TUrXS1nn/hwDisP9O9WA3xtdYe
oKoj05GTT7bZ5ICo22RnGamGPOYNIZnvhhkI88KqBQFhwSMWInqGk07JoNgZ
+Na+7AgQEEAkKvHY7M5n5WBACJCW4jwStArYdB3AsQ6NyN8x4xuNXcWSi0QU
+8V9jikgvIFGCoAUHVT+Pm0XFYLmKDJYYcSZzEst2AypFZ+Y5c0Vs3czQGD/
VBxxURrSNNL0CDnkZ0Yg5CBJvwEQU3Ab9Kv+ym/CQ2t8p59ygVsKmzEnCN9B
+dlu0XscIZwLmcI0oyQiH0dn6we5697i6nxck+9VU87qpyqglnCn6NQnUZ4C
p3bfRUXedxzkLNpoYtYjx7KPaDznPtQz3o4LXcjZo2j19n7XOjdh5eH8/LdK
eVNHPLduJGS1nkRpMpD1D/GFrq1aIN/hazwBxbVDYh9ik/3qZELYCWEVMYPe
VBWMCa8PCjWs5yZiSzsKEbyS5CFOe4pKKwyL++KfG9+Du4lotd9CERjQzo4X
sioG1ejyI+af37ZsJSbnuyG5tuENk4jqx5ykiWp3pJgfwMMiziOFWnY6qcDg
E1T9nVDRNEthEAWRL5ROhKtHSfVWP3L8fqb5wadgtMnqGyAfsNA4XCrWJy92
xTS4dftsyo7xsmBfIM2095mx844UviAizucsSe8ZzNbAXtxTG4IRGcODPrfz
OqSQl3wn26CtdWQC54spC0SNbYyUqETeI25LPMki8Y16zwqM/zblRJDiPTvK
v40I1k/pYKEVselk27y5JqOqK0ZH1VxA1k1fnCDYlmZ/UzYipEiaFG/0D3YV
A1mj6fwErM2wD3TKzyfk31KjJriUYTRp1HcWUCKxBKWQqSiYHGKFFsh2LO46
TDaBrqftaF6weZ+uGNZnnItL4PO/vDf2fDJNBbuYEFnIPkJogbhAEORjtwQE
mm92o5SNVe7dWqMehG+QmI4Mz1d0/vql9niZIwNm3uG535ihgvxw+mbRNVgy
N//UB0vfDsFR8M4GjyT88bjsPbydiiLb5/vFH3elazeCDH1Kpl7lJD46Xopn
x7urMTb8fCxFaVzw8i7LywadsqllHywVJw/j2Kcr2y0X8wrtheADUzB9LBbk
B4qjw3gaKMGPMNzcoER0qZIt6qV9uYph+MgWKTEIM35IbYW3r079dAnBYGYV
CI0G21XxXKT/Yg/0DSRu6oACOWel2p6hogE+eXUgBHUchPegUHcA1DI2jMwp
AkKTd76Lf2spn1Cg+wVrhppPcfKSYK669NJVdZmkgD4gWfoeID2mRfLUdS1H
/+HGjd8FWmhZKnxR4UqC49S5nCllhh7AZMrHnbNNZGC2yc5iQ1Zx6rGgknuD
CVeY55hDoY1NdB84NyX4seAQxZZvd2VwWp86RuRNHwCSz0kzBCmcbPOOrkVi
Y6AZx02VrlgcmtoXtvoPxyvLhiJrPSW44sDrXN3/ntE8IShDkK1LcT5hL6T4
VvwHv/rgOt3qiecCSD8/eSPQrRcOHUErA7WFLMnfMOl88zMNrHSh9W8WhFZ8
5WQSpGsaIHkDGfAkiRUE2LEieCvSpil3isssHqokSaQL+eQOPs7aBBycsUdO
Rb42vlK92qHe23i+9U1BCf4SBc6tYFl8ujwopuCyuka0pbdafRNCDhZKV3d3
0/CdYuXVN1qcIJrrXkvrNBSWCUGNE+eyahW9UuUwbFWyHt0x0/Amq6R8gRHn
P71STNrTHaXewo9HYhoxAa7jM9LZ5K5MC1X38Y6m+xxtqMTkkIBL9nYbNI5d
XTQT+HgWHOJZAP+Lja86JQESx8P+2XVEhjdZ+Efrdwy1HGZDDnJK2O8b+s3a
EU66HZKj1SNsWddNCHkoJJvvjfo+Cn+ivs1nFS4MJTtn42MbLoqXEQy5Edrr
gkLS+WcTZu051BJzmvWp0aFNfD/KJdySJT/pSDkGod/Ykpleqn823f9Tk5Te
XesKkXo6h8pIPqki75JopzHLZHsr0b8kSR7FjiO8F20x7VN4edYzr1Ag9F7Y
c5PH5/e1KVR9t4inlhu63Jh3TIMSWm2cP4UoLhUuhyxujHNarhb4eIPd5DlW
ckZVBYnNoU6JSeX7FVR9DChnzBpLJa+D/5vCOIAiIhCI3dgXzkriimYhOWk9
M5Qqnec4OUG5MGC8m4TiDp8sC+YZEApFiAKb8RTv9x/zP/ltN+3q7oSLLRYD
suGBoyZQzNWUrhlrGedZQbwVkRjDwg4wHqbNcyTpP4KI1pSpCO3SZ5XeHnXI
sP0ST37yjPENVXvIFh85l66WEu5sWuEzM7vL0Tr0mU3XvSz5vtrf8va36uCO
2i6F/3k7M1m0rfjxbXlGtPjjxGHEywMC/DeeZkxpQBxzRafu1Wg5JNwlXOtU
3nCWFN0oQEqxfXrmBq2xdegTwjIbCMD/sHMHVsgjCKJzwb0GvKx6iU+LOQn6
Y21oRS4FFXZ7WQUgQ8Krje9pkruHBR7EItCGaVmlsFwOEFWjVR8rklcxn7JE
BWYVn+XRcq1gPqxkQNJZLHpBsEj2pla9bJMjAVEiNW5dx6od9mObfGajFGZd
7shxhRFQponUp6IE2Qdj0Rg3TrHerpjWGoQ7CEnbVShiVD5nW6aqH7JCff8r
+G1EMOR8pEP3J/dlIi0VTeDIs5JVvxYmyqo369BYraUa/Nk0KVLf44GDmuBP
fEGePfeJddksNiWGjp2ja/eZjwDKpH8Nes05WgYGlJXonfVGyP3pKjK/33A1
vhT07DefDTomcdKNE4VVLKMpbK0D5AxVpvKsAp6qtDQTRKcRMBVsyIwaYEq6
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
====
END_OF_BASE64_ENCODED_DATA
        sed -i "s|%VERSION%|${VERSION}|g" AndroidManifest.xml
        mkdir build
        ${APK_TOOLS}/aapt package -f -I ${APK_PLATFORM}/android.jar -M AndroidManifest.xml -m -J build -F eVFRManual.unsigned.apk -S res -A "${DST_DIR}" || continue
        javac -source 1.6 -target 1.6 -bootclasspath ${APK_PLATFORM}/android.jar -sourcepath src -sourcepath build -d build src/ch/skyguide/eVFRManual/eVFRManualActivity.java || continue
        ${APK_TOOLS}/dx --dex --output=classes.dex build || continue
        ${APK_TOOLS}/aapt add -f eVFRManual.unsigned.apk classes.dex || continue
        if [ -n "${APK_KEYSTORE}" ]; then
          jarsigner -sigalg SHA1withRSA -digestalg SHA1 -keystore "${APK_KEYSTORE}" -signedjar eVFRManual.unaligned.apk eVFRManual.unsigned.apk "${APK_KEYALIAS}" || continue
        else
          echo "WARNING[$$]: Keystore not specified; using Android debug key" >&2
          keytool -genkey -keystore debug.keystore -storepass android -keypass android -alias androiddebugkey -dname 'CN=Android Debug,O=Android,C=US' || continue
          jarsigner  -keystore debug.keystore -storepass android -keypass android -signedjar eVFRManual.unaligned.apk eVFRManual.unsigned.apk androiddebugkey || continue
        fi
        ${APK_TOOLS}/zipalign -f 4 eVFRManual.unaligned.apk "${p_dst}"
      done
      popd >/dev/null || exit 1

      # Clean-up
      rm -rf "${d_tmp}"
    fi
    atomic_end
  done
fi

# Done
echo "INFO[$$]: Done"
exit 0

