#!/bin/bash

# Command-line
[ $# -lt 2 -o "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} [<option> ...] <source-dir> <destination-dir>

SYNOPSIS:
  Copy Skyguide eVFR Manual to the given destination directory, converting
  all PDF files to PNG images for easier/faster browsing.
  This script is "thread-safe", meaning that it can be executed concurrently
  with the same arguments in order to benefit from multiple CPUs/cores.

OPTIONS:
  -v, --version <YYMMDD>
    eVFR Manual version [default:latest]

  -d, --output-dpi <int>
    Output PNG images resolution (DPI) [default:120]

  -s, --size <int>
  -sx, --size-x <int>
  -sy, --size-y <int>
    Output PNG images maximum width/height (pixels) [default:height=1000]

  -p, --include-pdf
    Include original PDF file along the HTML/PNG output

  -cs, --charset <string>
    Filesystem character encoding [default:UTF-8]

  -nf, --no-frameset
    Do not use FRAMESET in generated HTML

  -h, --html-template
    HTML template used to replace the PDF file
    Any included '%FILE%', '%ID%' and '%PAGES%' anchors will be replaced
    with the approriate corresponding values.
    If not specified, the built-in template will be used.

  -l, --lean-ui
    Use custom 'left-hand' HTML for a leaner user-interface

  -z, --gzip <dir>
    Destination directory for .tar.gz archive

  -j, --bzip2 <dir>
    Destination directory for .tar.bz2 archive

  -a, --apk <dir>
    Destination directory for .apk (Android) archive

  --android-sdk <dir>
    Path to the Android SDK

  --android-keystore <file>
    Path to your keystore (optional)

  --android-keyalias <string>
    Alias of your signing key (optional)

AUTHOR:
  Cedric Dufour - http://cedric.dufour.name
EOF

# Arguments
VERSION=
IMG_DPI=120
IMG_X=
IMG_Y=1000
PDF_INCL=
CHARSET='UTF-8'
HTML_NOFRM=
HTML_TMPL=
HTML_LEAN=
SRC_DIR=
DST_DIR=
BZ2_DIR=
GZ_DIR=
APK_DIR=
APK_SDK=
APK_KEYSTORE=
APK_KEYALIAS=
while [ -n "${1}" ]; do
  case "${1}" in
    '-v'|'--version')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--version)' >&2 && exit 1; VERSION="${1}";;
    '-d'|'--output-dpi')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--output-dpi)' >&2 && exit 1; IMG_DPI="${1}";;
    '-s'|'--size')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-s)' >&2 && exit 1; IMG_X="${1}"; IMG_Y="${1}";;
    '-sx'|'--size-x')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-sx)' >&2 && exit 1; IMG_X="${1}";;
    '-sy'|'--size-y')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-sx)' >&2 && exit 1; IMG_Y="${1}";;
    '-p'|'--include-pdf')
      PDF_INCL='yes';;
    '-cs'|'--charset')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--charset)' >&2 && exit 1; CHARSET="${1}";;
    '-nf'|'--no-frameset')
      HTML_NOFRM='yes';;
    '-h'|'--html-template')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--html-template)' >&2 && exit 1; HTML_TMPL="${1}";;
    '-l'|'--lean-ui')
      HTML_LEAN='yes';;
    '-z'|'--gzip')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--gzip)' >&2 && exit 1; GZ_DIR="${1}";;
    '-j'|'--bzip2')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--bzip2)' >&2 && exit 1; BZ2_DIR="${1}";;
    '-a'|'--apk')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--apk)' >&2 && exit 1; APK_DIR="${1}";;
    '--android-sdk')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-sdk)' >&2 && exit 1; APK_SDK="${1}";;
    '--android-keystore')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-keystore)' >&2 && exit 1; APK_KEYSTORE="${1}";;
    '--android-keyalias')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-keyalias)' >&2 && exit 1; APK_KEYALIAS="${1}";;
    *)
      if [ -z "${SRC_DIR}" ]; then SRC_DIR="${1}"
      elif [ -z "${DST_DIR}" ]; then DST_DIR="${1}"
      else echo 'ERROR: Invalid (extra) argument (${1})' >&2 && exit 1
      fi
      ;;
  esac
  shift
done

# Check dependencies
[ -z "$(which pdf2html)" ] && echo "ERROR[$$]: 'pdf2html' cannot be found" >&2 && exit 1
[ -z "$(which uudecode)" ] && echo "ERROR[$$]: 'uudecode' cannot be found" >&2 && exit 1

# Check directories
SRC_DIR=${SRC_DIR%%/}
[ ! -d "${SRC_DIR}" ] && echo "ERROR[$$]: Invalid source directory (${SRC_DIR})" >&2 && exit 1
[ ! -r "${SRC_DIR}" ] && echo "ERROR[$$]: Unable to read from source directory (${SRC_DIR})" >&2 && exit 1
[ ! -d "${DST_DIR}" ] && echo "ERROR[$$]: Invalid destination directory (${DST_DIR})" >&2 && exit 1
[ ! -w "${DST_DIR}" ] && echo "ERROR[$$]: Unable to write to destination directory (${DST_DIR})" >&2 && exit 1
pushd "${DST_DIR}" >/dev/null || exit 1
DST_DIR="$(pwd)"
popd >/dev/null || exit 1
DST_DIR=${DST_DIR%%/}

# Check/retrieve version
[ -z "${VERSION}" ] && VERSION="$(find "${SRC_DIR}" -maxdepth 1 -type d -name "??????" | sed 's/^.*\///' | sort -rn | head -n 1)"
[ -z "${VERSION}" ] && echo "ERROR[$$]: Unable to retrieve (latest) version" >&2 && exit 1
SRC_DIR_VER="${SRC_DIR}/${VERSION}"
[ ! -d "${SRC_DIR_VER}" ] && "ERROR[$$]: Invalid version directory (${SRC_DIR_VER})" >&2 && exit 1
[ ! -r "${SRC_DIR_VER}" ] && echo "ERROR[$$]: Unable to read from version directory (${SRC_DIR_VER})" >&2 && exit 1
[ ! -e "${SRC_DIR_VER}/index.html" ] && echo "ERROR[$$]: Missing 'index.html' file in version directory (${SRC_DIR_VER})" >&2 && exit 1
[ ! -e "${SRC_DIR_VER}/Full" ] && echo "ERROR[$$]: Missing 'Full' (AIP) directory in version directory (${SRC_DIR_VER})" >&2 && exit 1
[ ! -e "${SRC_DIR_VER}/VFG" ] && echo "ERROR[$$]: Missing 'VFG' (VFR Guide) directory in version directory (${SRC_DIR_VER})" >&2 && exit 1
DST_DIR_VER="${DST_DIR}/${VERSION}"

# Lock function
DST_LOCK="${DST_DIR}/.lock"
function atomic_begin {
  n=100; while true; do # loop for ~5 seconds (100 x 0.05 seconds in average)
    n=$(( ${n}-1 ))
    [ ${n} -le 0 ] && echo "ERROR[$$]: Failed to acquire lock (${DST_LOCK})" >&2 && exit 1
    [ $(( ${n} % 10 )) -eq 0 ] && echo "WARNING[$$]: Waiting for lock (${DST_LOCK})" >&2
    if ( set -o noclobber; echo -n > "${DST_LOCK}" ) 2>/dev/null; then
      break
    fi
    sleep 0.0$(( ${RANDOM} % 10 ))
  done
}
function atomic_end {
  rm -f "${DST_LOCK}"
}

# Trap signals
trap 'echo "INTERRUPT[$$]: Cleaning and aborting" >&2; rm -f "${DST_LOCK}" "${p_dst}"; exit 2' INT TERM

# Loop through files 
IFS=$'\n'; for p_src in $(find "${SRC_DIR}" -path "${SRC_DIR_VER}/*" -type f | sort); do

  # Compute destination file name
  e_src="${p_src##*.}"
  case "${e_src}" in
    'p7s') continue;;
    *) p_dst="${p_src}";;
  esac
  p_dst="${DST_DIR}/${p_dst#${SRC_DIR}/}"

  # Compute destination file name (cont'd)
  f_src="$(basename ${p_src})"
  d_dst="$(dirname ${p_dst})"
  f_dst="$(basename ${p_dst})"

  # Ignore irrelevant files
  [ "${f_src}" == 'EntireVFRM.zip' ] && continue
  [ "${f_src}" == 'Thumbs.db' ] && continue

  # Check/create destination directory
  [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
  [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
  [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

  # Check destination file
  atomic_begin
  [ -e "${p_dst}" ] && atomic_end && continue
  touch "${p_dst}"
  atomic_end

  # Import
  echo "INFO[$$]: Importing ${p_src} -> ${p_dst}"
  case "${e_src}" in
    'pdf'|'PDF')
      pdf2html -d ${IMG_DPI} ${IMG_X:+-sx} ${IMG_X:+${IMG_X}} ${IMG_Y:+-sy} ${IMG_Y:+${IMG_Y}} ${PDF_INCL:+-p} ${CHARSET:+-cs} ${CHARSET:+${CHARSET}} ${HTML_NOFRM:+-nf} ${HTML_TMPL:+-h} ${HTML_TMPL:+${HTML_TMPL}} "${p_src}" "${d_dst}"
      ;;
    *)
      cp "${p_src}" "${p_dst}"
      ;;
  esac
    
done

# Finalize
atomic_begin
if [ ! -e "${DST_DIR}/index.html" ]; then
  touch "${DST_DIR}/index.html"
  atomic_end

  echo "INFO[$$]: Add version to cover page..."
  sed -i "s|\\(Aeronautical Information Publication\\)|\\1\\n<br>Version: ${VERSION}|i" "${DST_DIR_VER}/html/cover.html"

  echo "INFO[$$]: Fixing broken links..."
  sed -i 's|href="../../../index.html" target="_top"|href="http://www.skyguide.ch/" target="_top"|' "${DST_DIR_VER}/html/commands.html"

  echo "INFO[$$]: Fixing browsing menus..."
  find "${DST_DIR}" -name 'tree_items_*.js' -exec sed -i 's/\.pdf/.html/g' {} \;

  echo "INFO[$$]: Creating top-level index..."
  cat << EOF > "${DST_DIR}/index.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="Refresh" CONTENT="0; url=./${VERSION}/index.html" />
</HEAD>
</HTML>
EOF

  if [ -n "${HTML_LEAN}" ]; then
    echo "INFO[$$]: Creating lean index..."

    # Remove "commands" frame
    cat << EOF > "${DST_DIR_VER}/index.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
<TITLE>eVFR Manual (${VERSION})</title>
</HEAD>
<FRAMESET COLS="200,*">
<FRAMESET ROWS="23,*" BORDER="0">
<FRAME NAME="menu" ID="menu" SRC="./html/menu.html" NORESIZE SCROLLING="no" FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
<FRAME NAME="navigation" ID="navigation" SRC="./html/navigation.html" NORESIZE FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
</FRAMESET>
<FRAME NAME="VfrmMain" ID="VfrmMain" SRC="./html/cover.html" FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
</FRAMESET>
</HTML>
EOF

    # Make navigation tree less space-wasting
    sed -i 's|min-width:[^;]*|width:200px|i;s|font-family:[^;]*|font-family:sans-serif|i;s|font-size:[^;]*|font-size:10px|i' "${DST_DIR_VER}/styles/navigation.css"

    # Allow wraping in navigation tree
    sed -i 's| *nowrap||i' "${DST_DIR_VER}/scripts/tree.js"

    # Replace space-wasting icons by smaller ones
    for image in folder.gif folderopen.gif foldersel.gif page.gif pagesel.gif join.gif joinbottom.gif line.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhAgABAIABAAAAAP///yH5BAEKAAEALAAAAAACAAEAAAICTAoAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in plus.gif plusbottom.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhDQARAKECAF5bTAAAAP///////yH5BAEAAAIALAAAAAANABEAAAIi
lI+py+0PEZiUygWuCSf3wxmeKASmKYwp+LWluypqRUdRAQA7
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in minus.gif minusbottom.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhDQARAKECAF5bTAAAAP///////yH5BAEAAAIALAAAAAANABEAAAId
lI+py+1/gJwTgXUjtluH/wmZMXKaUpYnSVHQCxcAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in empty.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCwABAIABAAAAAP///yH5BAEKAAEALAAAAAALAAEAAAIDjI9RADs=
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in page.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCQARAIABAAAAAP///yH5BAEKAAEALAAAAAAJABEAAAIRjI+py+3f
gEzgVItzuHbC/xUAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in pagesel.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR_VER}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCQARAIABAAAAAP///yH5BAEKAAEALAAAAAAJABEAAAIRjI+py+3f
gEyyojoPBjTDDxUAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
  fi

  echo "INFO[$$]: Tagging folder as non-media content for Android"
  touch "${DST_DIR}/.nomedia"
fi
atomic_end

# Gzip archive
if [ -n "${GZ_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${GZ_DIR}"; do
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

    # Create archive
    p_dst="${d_dst}/eVFRManual-${VERSION}.tar.gz"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."
      tar -C "${DST_DIR}" -czf "${p_dst}" .
    fi
    atomic_end
  done
fi

# Bzip2 archive
if [ -n "${BZ2_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${BZ2_DIR}"; do
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

    # Create archive
    p_dst="${d_dst}/eVFRManual-${VERSION}.tar.bz2"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."
      tar -C "${DST_DIR}" -cjf "${p_dst}" .
    fi
    atomic_end
  done
fi

# APK archive
if [ -n "${APK_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${APK_DIR}"; do
    # Check Android SDK
    [ -z "${APK_SDK}" -o ! -d "${APK_SDK}/platform-tools" ] && echo "WARNING[$$]: Missing/invalid Android SDK directory (${APK_SDK}); skipping..." >&2 && continue
    pushd "${APK_SDK}" >/dev/null || continue
    APK_SDK="$(pwd)"
    popd >/dev/null || continue
    APK_SDK="${APK_SDK%%/}"
    APK_PLATFORM="$(ls -1d "${APK_SDK}"/platforms/* | sort -V | tail -n 1)"
    [ -z "${APK_PLATFORM}" ] && echo "WARNING[$$]: Cannot find Android SDK platform (${APK_SDK}/platforms/...); skipping..." >&2 && continue
    APK_TOOLS="$(ls -1d "${APK_SDK}"/build-tools/* | sort -V | tail -n 1)"
    [ -z "${APK_TOOLS}" ] && echo "WARNING[$$]: Cannot find Android SDK build tools (${APK_SDK}/build-tools/...); skipping..." >&2 && continue
    
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue
    pushd "${d_dst}" >/dev/null || continue
    d_dst="$(pwd)"
    popd >/dev/null || continue
    d_dst="${d_dst%%/}"

    # Check keystore
    [ -n "${APK_KEYSTORE}" -a ! -r "${APK_KEYSTORE}" ] && echo "WARNING[$$]: Missing/unreadable keystore (${APK_KEYSTORE}); skipping..." >&2 && continue

    p_dst="${d_dst}/eVFRManual-${VERSION}.apk"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."

      # Create temporary project directory
      d_tmp="/tmp/${0##*/}.$$"
      [ ! -d "${d_tmp}" ] && mkdir -p "${d_tmp}"
      [ ! -d "${d_tmp}" ] && echo "WARNING[$$]: Failed to create project directory (${d_tmp}); skipping..." >&2 && continue
      [ ! -w "${d_tmp}" ] && echo "WARNING[$$]: Unable to write to project directory (${d_tmp}); skipping..." >&2 && continue

      # Build Android archive
      pushd "${d_tmp}" >/dev/null || continue
      for n in 1; do
        cat << END_OF_BASE64_ENCODED_DATA | uudecode | tar -xJ
begin-base64 644 /dev/stdout
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
QbUD0GiDEiaVGvWLHyo6cFf3CE2bz/sDgLTJuO7pCYH7FYT/fxfqqriCXQN+
vwsreMkngy86kAV87pkuv7ZaTF7bG+hUV++b10ihj2tP0nfkfyVpoB8Ph+nn
IUyGzMg4ZD86bcupt+NMsS54lpu67WTC3rq2reHhDNSkG/9FpBLsfO4TVllK
aUkjqzU9roIKzoGphUEVdWnCE7ANEfeh5cjdiK0gA2aeEVQwq6cGlwIQ67au
RT/5cI/o9zjejXIK77DrSE/iIZdUkiWnwvoP/QThevBDUP92RZZSaEbJcDJP
i9FmIhHpjQF3Q5MlguFHlGcjIVGGOmD6ZJ9fO6oOdoVWJyj27YySvMar3j7g
kbkv8IN5HZ/bG3DVNtsnbvJJyDqIOmvkDoCyv3/CBfDrmFbBa9J1VNoVqqx2
XOJxLLaCY16lmWmGhRnoWTLZNnVE5m13fA0xiR8af8Q9XEhx483RPlmGXUD+
94EEuVHrtx5l7BF8EMMSH8UTh328lDIlquLtRUjDzgh8BACTSx0NpCL0Yg2c
qtIVpE803F6W29Wbty9AOQubZWFYoA5QyJA3AOJIDUrkVXLWJwd5g+0vQ1XN
gVd9sCGwWAr5e+ftW9mvBw0JHcZUUhUB565CTniiqFXWc9b1nqIvwv33Urrj
Lkn8EuF2lTKgchuYgSFt5j77imH+cX0tIkHlTJ6Qqd4sTH1NgUM9oyXdd1kz
4Rg7XSQ4wAHGtcFbH2t/tChw73enlXuOgW+nDowilVvHxhyY8PA1vrcpbAna
dhUL+hc4D/E4kN6e9G9pX5jyacn83q4dowKUF502euxyukiXYdN/RY0kXnDX
yASvUfX3AH0euyci0+llKvTpVkCu7kGZWA8fux+X86vYxLdvcbmx8gKdVYwM
e7SwODMK8xp0PY4bcJwLrM3E0Je2ggMwCYy5MEfQuYOOGU+01aFR4Xwl68/9
wOBf4+zFWj6cU4aO4uO89sc/TzmaZ+Kh3iI0UZ91cXmnTWbvuiF2N9pajP1w
Mi6A/8QH+6OeDIN+SLKnSlrfl/1QvG/NqsZeGL+cFtbN3nVVlXEGBDW4AY53
0CxUla8DmbsYhSitGKufpjxtZffnzJrLeosnHkVyG7inG4XkZyzYlkiWzMpc
ZEX2BFEZT6a07bJgz+VsejqwlYLJQJv/Pq2+Y2s0CH+zD3lR1zg1y3uCqS18
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
AgAAAAAEWVo=
====
END_OF_BASE64_ENCODED_DATA
        sed -i "s|%VERSION%|${VERSION}|g" AndroidManifest.xml
        mkdir build
        ${APK_TOOLS}/aapt package -f -I ${APK_PLATFORM}/android.jar -M AndroidManifest.xml -m -J build -F eVFRManual.unsigned.apk -S res -A "${DST_DIR}" || continue
        javac -source 1.6 -target 1.6 -bootclasspath ${APK_PLATFORM}/android.jar -sourcepath src -sourcepath build -d build src/ch/skyguide/eVFRManual/eVFRManualActivity.java || continue
        ${APK_TOOLS}/dx --dex --output=classes.dex build || continue
        ${APK_TOOLS}/aapt add -f eVFRManual.unsigned.apk classes.dex || continue
        if [ -n "${APK_KEYSTORE}" ]; then
          jarsigner -sigalg SHA1withRSA -digestalg SHA1 -keystore "${APK_KEYSTORE}" -signedjar eVFRManual.unaligned.apk eVFRManual.unsigned.apk "${APK_KEYALIAS}" || continue
        else
          echo "WARNING[$$]: Keystore not specified; using Android debug key" >&2
          keytool -genkey -keystore debug.keystore -storepass android -keypass android -alias androiddebugkey -dname 'CN=Android Debug,O=Android,C=US' || continue
          jarsigner  -keystore debug.keystore -storepass android -keypass android -signedjar eVFRManual.unaligned.apk eVFRManual.unsigned.apk androiddebugkey || continue
        fi
        ${APK_TOOLS}/zipalign -f 4 eVFRManual.unaligned.apk "${p_dst}"
      done
      popd >/dev/null || exit 1

      # Clean-up
      rm -rf "${d_tmp}"
    fi
    atomic_end
  done
fi

# Done
echo "INFO[$$]: Done"
exit 0

