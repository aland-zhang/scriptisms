#!/bin/bash

# Command-line
[ $# -lt 2 -o "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} [<option> ...] <source-dir> <destination-dir>

SYNOPSIS:
  Copy Skyguide eVFR Manual to the given destination directory, converting
  all PDF files to PNG images for easier/faster browsing.
  This script is "thread-safe", meaning that it can be executed concurrently
  with the same arguments in order to benefit from multiple CPUs/cores.

OPTIONS:
  -d, --output-dpi     Output PNG images resolution (DPI) [default:100]

  -D, --input-dpi      Input PDF resolution (DPI) [default:3*image-dpi]
      For PDF document containing bitmap images, setting this option to 2-4x
      the output image resolution allows over-sampling of the input image
      and anti-aliasing to kick in the conversion process.

  -p, --include-pdf    Include original PDF file along the HTML/PNG output

  -cs, --charset       Filesystem character encoding [default:UTF-8]

  -nf, --no-frameset   Do not use FRAMESET in generated HTML

  -h, --html-template  HTML template used to replace the PDF file
      Any included '%FILE%', '%ID%' and '%PAGES%' anchors will be replaced
      with the approriate corresponding values.
      If not specified, the built-in template will be used.

  -l, --lean-ui        Use custom 'left-hand' HTML for a leaner user-interface

  -z, --gzip           Destination directory for .tar.gz archive

  -j, --bzip2          Destination directory for .tar.bz2 archive

  -a, --apk            Destination directory for .apk (Android) archive
  --android-sdk        Path to the Android SDK (requires platform 'android-16')
  --android-keystore   Path to your keystore (optional)
  --android-keyalias   Alias of your signing key (optional)

AUTHOR:
  Cedric Dufour - http://cedric.dufour.name
EOF

# Arguments
IMG_DPI=100
PDF_DPI=
PDF_INCL=
CHARSET='UTF-8'
HTML_NOFRM=
HTML_TMPL=
HTML_LEAN=
SRC_DIR=
DST_DIR=
BZ2_DIR=
GZ_DIR=
APK_DIR=
APK_SDK=
APK_KEYSTORE=
APK_KEYALIAS=
while [ -n "${1}" ]; do
  case "${1}" in
    '-d'|'--output-dpi')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--output-dpi)' >&2 && exit 1; IMG_DPI="${1}";;
    '-D'|'--input-dpi')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--input-dpi)' >&2 && exit 1; PDF_DPI="${1}";;
    '-p'|'--include-pdf')
      PDF_INCL='yes';;
    '-cs'|'--charset')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--charset)' >&2 && exit 1; CHARSET="${1}";;
    '-nf'|'--no-frameset')
      HTML_NOFRM='yes';;
    '-h'|'--html-template')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--html-template)' >&2 && exit 1; HTML_TMPL="${1}";;
    '-l'|'--lean-ui')
      HTML_LEAN='yes';;
    '-z'|'--gzip')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--gzip)' >&2 && exit 1; GZ_DIR="${1}";;
    '-j'|'--bzip2')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--bzip2)' >&2 && exit 1; BZ2_DIR="${1}";;
    '-a'|'--apk')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--apk)' >&2 && exit 1; APK_DIR="${1}";;
    '--android-sdk')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-sdk)' >&2 && exit 1; APK_SDK="${1}";;
    '--android-keystore')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-keystore)' >&2 && exit 1; APK_KEYSTORE="${1}";;
    '--android-keyalias')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (--android-keyalias)' >&2 && exit 1; APK_KEYALIAS="${1}";;
    *)
      if [ -z "${SRC_DIR}" ]; then SRC_DIR="${1}"
      elif [ -z "${DST_DIR}" ]; then DST_DIR="${1}"
      else echo 'ERROR: Invalid (extra) argument (${1})' >&2 && exit 1
      fi
      ;;
  esac
  shift
done
# NOTE: By default, let's use 3x over-sampling in order to cope with PDF containing bitmap images (and thus allow anti-aliasing nonetheless)
[ -z "${PDF_DPI}" ] && PDF_DPI=$(( 3 * ${IMG_DPI} ))

# Check dependencies
[ -z "$(which pdf2html)" ] && echo "ERROR[$$]: 'pdf2html' cannot be found" >&2 && exit 1

# Check directories and files
SRC_DIR=${SRC_DIR%%/}
[ ! -d "${SRC_DIR}" ] && echo "ERROR[$$]: Invalid source directory (${SRC_DIR})" >&2 && exit 1
[ ! -r "${SRC_DIR}" ] && echo "ERROR[$$]: Unable to read from source directory (${SRC_DIR})" >&2 && exit 1
[ ! -e "${SRC_DIR}/eVFRM_list.xml" ] && echo "ERROR[$$]: Missing 'eVFRM_list.xml' in source directory (${SRC_DIR})" >&2 && exit 1
[ ! -d "${DST_DIR}" ] && echo "ERROR[$$]: Invalid destination directory (${DST_DIR})" >&2 && exit 1
[ ! -w "${DST_DIR}" ] && echo "ERROR[$$]: Unable to write to destination directory (${DST_DIR})" >&2 && exit 1
pushd "${DST_DIR}" >/dev/null || exit 1
DST_DIR="$(pwd)"
popd >/dev/null || exit 1
DST_DIR=${DST_DIR%%/}

# Lock function
DST_LOCK="${DST_DIR}/.lock"
function atomic_begin {
  n=100; while true; do # loop for ~5 seconds (100 x 0.05 seconds in average)
    n=$(( ${n}-1 ))
    [ ${n} -le 0 ] && echo "ERROR[$$]: Failed to acquire lock (${DST_LOCK})" >&2 && exit 1
    [ $(( ${n} % 10 )) -eq 0 ] && echo "WARNING[$$]: Waiting for lock (${DST_LOCK})" >&2
    if ( set -o noclobber; echo -n > "${DST_LOCK}" ) 2>/dev/null; then
      break
    fi
    sleep 0.0$(( ${RANDOM} % 10 ))
  done
}
function atomic_end {
  rm -f "${DST_LOCK}"
}

# Trap signals
trap 'echo "INTERRUPT[$$]: Cleaning and aborting" >&2; rm -f "${DST_LOCK}" "${p_dst}"; exit 2' INT TERM

# Loop through files 
IFS=$'\n'; for p_src in $(find "${SRC_DIR}" -type f | sort); do
  # Compute destination file name
  e_src="${p_src##*.}"
  case "${e_src}" in
    'p7s') continue;;
    *) p_dst="${p_src}";;
  esac
  p_dst="${DST_DIR}/${p_dst#${SRC_DIR}/}"

  # Compute destination file name (cont'd)
  f_src="$(basename ${p_src})"
  d_dst="$(dirname ${p_dst})"
  f_dst="$(basename ${p_dst})"

  # Check/create destination directory
  [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
  [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
  [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

  # Check destination file
  atomic_begin
  [ -e "${p_dst}" ] && atomic_end && continue
  touch "${p_dst}"
  atomic_end

  # Import
  echo "INFO[$$]: Importing ${p_src} -> ${p_dst}"
  case "${e_src}" in
    'pdf'|'PDF')
      pdf2html -d ${IMG_DPI} -D ${PDF_DPI} ${PDF_INCL:+-p} ${CHARSET:+-cs} ${CHARSET:+${CHARSET}} ${HTML_NOFRM:+-nf} ${HTML_TMPL:+-h} ${HTML_TMPL:+${HTML_TMPL}} "${p_src}" "${d_dst}"
      ;;
    *)
      cp "${p_src}" "${p_dst}"
      ;;
  esac
    
done

# Finalize
version="$(fgrep -i '<eAip wef=' "${SRC_DIR}/eVFRM_list.xml" | sort | tail -n 1 | sed 's/.*<eAip wef="//;s/".*//')"
atomic_begin
if [ ! -e "${DST_DIR}/index.html" ]; then
  touch "${DST_DIR}/index.html"
  atomic_end

  echo "INFO[$$]: Fixing broken links..."
  sed -i 's|href="../../../index.html" target="_top"|href="http://www.skyguide.ch/" target="_top"|' "${DST_DIR}/${version}/html/commands.html"

  echo "INFO[$$]: Fixing browsing menus..."
  find "${DST_DIR}" -name 'tree_items_*.js' -exec sed -i 's/\.pdf/.html/g' {} \;

  echo "INFO[$$]: Creating top-level index..."
  cat << EOF > "${DST_DIR}/index.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="Refresh" CONTENT="0; url=./${version}/index.html" />
</HEAD>
</HTML>
EOF

  if [ -n "${HTML_LEAN}" ]; then
    echo "INFO[$$]: Creating lean index..."
    # Hide "commands" frame
    cat << EOF > "${DST_DIR}/${version}/index.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
<TITLE>eVFR Manual (${version})</title>
</HEAD>
<FRAMESET COLS="200,*">
<FRAMESET ROWS="0,23,*" BORDER="0">
<FRAME NAME="eAISCommands" SRC="./html/commands.html" NORESIZE SCROLLING="no" FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
<FRAME NAME="menu" ID="menu" SRC="./html/menu.html" NORESIZE SCROLLING="no" FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
<FRAME NAME="navigation" ID="navigation" SRC="./html/navigation.html" NORESIZE FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
</FRAMESET>
<FRAME NAME="VfrmMain" ID="VfrmMain" SRC="./html/cover.html" FRAMEBORDER="0" MARGINHEIGHT="0" MARGINWIDTH="0" />
</FRAMESET>
</HTML>
EOF
    # Replace "commands" HTML
    cat << EOF > "${DST_DIR}/${version}/html/commands.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"/>
<SCRIPT SRC="../scripts/determine_list.js" TYPE="text/javascript"></SCRIPT>
</HEAD>
<BODY STYLE="DISPLAY:none;" ONLOAD="buildList('../../eVFRM_list.xml')">
<SELECT ID="selectX"></SELECT>
</BODY>
</HTML>
EOF
    # Make navigation tree less space-wasting
    sed -i 's|min-width:[^;]*|width:200px|i;s|font-family:[^;]*|font-family:sans-serif|i;s|font-size:[^;]*|font-size:10px|i' "${DST_DIR}/${version}/styles/navigation.css"
    # Allow wraping in navigation tree
    sed -i 's| *nowrap||i' "${DST_DIR}/${version}/scripts/tree.js"
    # Replace space-wasting icons by smaller ones
    for image in folder.gif folderopen.gif foldersel.gif page.gif pagesel.gif join.gif joinbottom.gif line.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR}/${version}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhAgABAIABAAAAAP///yH5BAEKAAEALAAAAAACAAEAAAICTAoAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in plus.gif plusbottom.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR}/${version}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhDQARAKECAF5bTAAAAP///////yH5BAEAAAIALAAAAAANABEAAAIi
lI+py+0PEZiUygWuCSf3wxmeKASmKYwp+LWluypqRUdRAQA7
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in minus.gif minusbottom.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR}/${version}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhDQARAKECAF5bTAAAAP///////yH5BAEAAAIALAAAAAANABEAAAId
lI+py+1/gJwTgXUjtluH/wmZMXKaUpYnSVHQCxcAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in empty.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR}/${version}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCwABAIABAAAAAP///yH5BAEKAAEALAAAAAALAAEAAAIDjI9RADs=
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in page.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR}/${version}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCQARAIABAAAAAP///yH5BAEKAAEALAAAAAAJABEAAAIRjI+py+3f
gEzgVItzuHbC/xUAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
    for image in pagesel.gif; do
cat << END_OF_BASE64_ENCODED_DATA | uudecode > "${DST_DIR}/${version}/images/${image}"
begin-base64 644 /dev/stdout
R0lGODlhCQARAIABAAAAAP///yH5BAEKAAEALAAAAAAJABEAAAIRjI+py+3f
gEyyojoPBjTDDxUAOw==
====
END_OF_BASE64_ENCODED_DATA
    done
  fi

  echo "INFO[$$]: Tagging folder as non-media content for Android"
  touch "${DST_DIR}/.nomedia"
fi
atomic_end

# Gzip archive
if [ -n "${GZ_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${GZ_DIR}"; do
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

    # Create archive
    p_dst="${d_dst}/eVFRManual-${version}.tar.gz"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."
      tar -C "${DST_DIR}" -czf "${p_dst}" .
    fi
    atomic_end
  done
fi

# Bzip2 archive
if [ -n "${BZ2_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${BZ2_DIR}"; do
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue

    # Create archive
    p_dst="${d_dst}/eVFRManual-${version}.tar.bz2"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."
      tar -C "${DST_DIR}" -cjf "${p_dst}" .
    fi
    atomic_end
  done
fi

# APK archive
if [ -n "${APK_DIR}" ]; then
  IFS=$'\n'; for d_dst in "${APK_DIR}"; do
    # Check Android SDK
    [ -z "${APK_SDK}" -o ! -d "${APK_SDK}/platform-tools" ] && echo "WARNING[$$]: Missing/invalid Android SDK directory (${APK_SDK}); skipping..." >&2 && continue
    pushd "${APK_SDK}" >/dev/null || continue
    APK_SDK="$(pwd)"
    popd >/dev/null || continue
    APK_SDK="${APK_SDK%%/}"
    
    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}); skipping..." >&2 && continue
    pushd "${d_dst}" >/dev/null || continue
    d_dst="$(pwd)"
    popd >/dev/null || continue
    d_dst="${d_dst%%/}"

    # Check keystore
    [ -n "${APK_KEYSTORE}" -a ! -r "${APK_KEYSTORE}" ] && echo "WARNING[$$]: Missing/unreadable keystore (${APK_KEYSTORE}); skipping..." >&2 && continue

    # Check Android platform
    [ ! -d "${APK_SDK}/platforms/android-16" ] && echo "WARNING[$$]: Missing/invalid Android platform (android-16); skipping..." >&2 && continue

    p_dst="${d_dst}/eVFRManual-${version}.apk"
    atomic_begin
    if [ ! -e "${p_dst}" ]; then
      touch "${p_dst}"
      atomic_end
      echo "INFO[$$]: Creating archive (${p_dst})..."

      # Create temporary project directory
      d_tmp="/tmp/${0##*/}.$$"
      [ ! -d "${d_tmp}" ] && mkdir -p "${d_tmp}"
      [ ! -d "${d_tmp}" ] && echo "WARNING[$$]: Failed to create project directory (${d_tmp}); skipping..." >&2 && continue
      [ ! -w "${d_tmp}" ] && echo "WARNING[$$]: Unable to write to project directory (${d_tmp}); skipping..." >&2 && continue

      # Build Android archive
      pushd "${d_tmp}" >/dev/null || continue
      for n in 1; do
        cat << END_OF_BASE64_ENCODED_DATA | uudecode | bzip2 -d | tar -x
begin-base64 644 /dev/stdout
QlpoOTFBWSZTWXLx8H4AF0N/////////////////////////////////////
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
====
END_OF_BASE64_ENCODED_DATA
        sed -i "s|%VERSION%|${version}|g" AndroidManifest.xml
        mkdir build
        ${APK_SDK}/platform-tools/aapt package -f -I ${APK_SDK}/platforms/android-16/android.jar -M AndroidManifest.xml -m -J build -F eVFRManual.resources.apk -S res -A "${DST_DIR}" || continue
        javac -bootclasspath ${APK_SDK}/platforms/android-16/android.jar -sourcepath src -sourcepath build -d build src/ch/skyguide/eVFRManual/eVFRManualActivity.java || continue
        ${APK_SDK}/platform-tools/dx --dex --output=eVFRManual.dex build || continue
        ${APK_SDK}/tools/apkbuilder eVFRManual.unsigned.apk -u -z eVFRManual.resources.apk -f eVFRManual.dex || continue
        if [ -n "${APK_KEYSTORE}" ]; then
          jarsigner  -keystore "${APK_KEYSTORE}" -signedjar eVFRManual.unaligned.apk eVFRManual.unsigned.apk "${APK_KEYALIAS}" || continue
        else
          echo "WARNING[$$]: Keystore not specified; using Android debug key" >&2
          keytool -genkey -keystore debug.keystore -storepass android -keypass android -alias androiddebugkey -dname 'CN=Android Debug,O=Android,C=US' || continue
          jarsigner  -keystore debug.keystore -storepass android -keypass android -signedjar eVFRManual.unaligned.apk eVFRManual.unsigned.apk androiddebugkey || continue
        fi
        ${APK_SDK}/tools/zipalign -f 4 eVFRManual.unaligned.apk "${p_dst}"
      done
      popd >/dev/null || exit 1

      # Clean-up
      rm -rf "${d_tmp}"
    fi
    atomic_end
  done
fi

# Done
echo "INFO[$$]: Done"
exit 0

