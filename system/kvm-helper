#!/bin/bash

# Usage
function _help {
cat >&2 << EOF
USAGE: ${0##*/} <mode> [...]

SYNOPSIS:
  Launch a KVM virtual server (guest) with appropriate options for the
  requested mode (see AVAILABLE MODES).

  Network settings - when applicables - are automatically adjusted to match the
  given host name (and according to the '~/.kvm/network.cfg' file).

AVAILABLE MODES:
  - ${0##*/} info <host-name|ip-address>
    > Display server information (IP, MAC, UUID, etc.)

  - ${0##*/} hd-net <image-hd> [<kvm-options>]
    > Boot from hard disk (no network)

  - ${0##*/} hd <image-hd> <host-name> [<kvm-options>]
    > Boot from hard disk (with network)

  - ${0##*/} hd2 <image-hd1> <host-name> <image-hd2> [<kvm-options>]
    > Boot from hard disk (with network and additional hard disk)

  - ${0##*/} hd+cd <image-hd> <host-name> <image-iso-cd> [<kvm-options>]
    > Boot from optical disk (with network)

  - ${0##*/} hd2+cd <image-hd1> <host-name> <image-hd2> <image-iso-cd> [<kvm-options>]
    > Boot from optical disk (with network and additional optical disk)

  - ${0##*/} hd+cd2 <image-hd> <host-name> <image-iso-cd1> <image-iso-cd2> [<kvm-options>]
    > Boot from optical disk (with network and additional optical disk)

  - ${0##*/} hd+pxe <image-hd> <host-name> [<kvm-options>]
    > Boot from the network (PXE boot)

  - ${0##*/} vnc [[<host>]:display>]
    > Starts the VNC viewer

  - ${0##*/} start|stop
    > Starts/stops KVM (load/unload kernel modules; REQUIRES SUDO PRIVILEGES)

DEFAULT OPTIONS:
  - Boot Device: depends on chosen mode ('-boot ...')
  - Memory (RAM): 1024kB ('-m 1024')
  - RTC Timezone: UTC ('-rtc base=utc')
  - VNC Display: localhost:0 ('-vnc localhost:0')

AUTHOR:
  Cedric Dufour - http://cedric.dufour.name
EOF
}
[ $# -lt 1 ] && _help && exit 1;

# Mode
MY_MODE="${1}"; shift
case "${MY_MODE}" in

  'info')
    [ $# -lt 1 ] && echo "ERROR: Missing argument(s)" >&2 && exit 1;
    MY_HOSTNAME="${1}"; shift
    ;;

  'hd-net')
    [ $# -lt 1 ] && echo "ERROR: Missing argument(s)" >&2 && exit 1;
    MY_HD="${1}"; shift
    MY_HOSTNAME='';
    MY_OPTION_BOOT='-boot c'
    ;;

  'hd')
    [ $# -lt 2 ] && echo "ERROR: Missing argument(s)" >&2 && exit 1;
    MY_HD="${1}"; shift
    MY_HOSTNAME="${1}"; shift
    MY_OPTION_BOOT='-boot c'
    ;;

  'hd2')
    [ $# -lt 3 ] && echo "ERROR: Missing argument(s)" >&2 && exit 1;
    MY_HD="${1}"; shift
    MY_HOSTNAME="${1}"; shift
    MY_HD2="${1}"; shift
    MY_HD2_FORMAT="${MY_HD2##*.}"; [ -z "${MY_HD2_FORMAT}" -o "${MY_HD2_FORMAT}" == "${MY_HD2}" ] && MY_HD2_FORMAT='raw';
    MY_OPTION_RESOURCE="-drive file=${MY_HD2},if=virtio,media=disk,format=${MY_HD2_FORMAT},index=1"
    MY_OPTION_BOOT='-boot c'
    ;;

  'hd+cd')
    [ $# -lt 3 ] && echo "ERROR: Missing argument(s)" >&2 && exit 1;
    MY_HD="${1}"; shift
    MY_HOSTNAME="${1}"; shift
    MY_ISO="${1}"; shift
    MY_OPTION_RESOURCE="-drive file=${MY_ISO},media=cdrom,index=2"
    MY_OPTION_BOOT='-boot d'
    ;;

  'hd2+cd')
    [ $# -lt 4 ] && echo "ERROR: Missing argument(s)" >&2 && exit 1;
    MY_HD="${1}"; shift
    MY_HOSTNAME="${1}"; shift
    MY_HD2="${1}"; shift
    MY_HD2_FORMAT="${MY_HD2##*.}"; [ -z "${MY_HD2_FORMAT}" -o "${MY_HD2_FORMAT}" == "${MY_HD2}" ] && MY_HD2_FORMAT='raw';
    MY_ISO="${1}"; shift
    MY_OPTION_RESOURCE="-drive file=${MY_HD2},if=virtio,media=disk,format=${MY_HD2_FORMAT},index=1 -drive file=${MY_ISO},media=cdrom,index=2"
    MY_OPTION_BOOT='-boot d'
    ;;

  'hd+cd2')
    [ $# -lt 4 ] && echo "ERROR: Missing argument(s)" >&2 && exit 1;
    MY_HD="${1}"; shift
    MY_HOSTNAME="${1}"; shift
    MY_ISO="${1}"; shift
    MY_ISO2="${1}"; shift
    MY_OPTION_RESOURCE="-drive file=${MY_ISO},media=cdrom,index=2 -drive file=${MY_ISO2},media=cdrom,index=3"
    MY_OPTION_BOOT='-boot d'
    ;;

  'hd+pxe')
    [ $# -lt 2 ] && echo "ERROR: Missing argument(s)" >&2 && exit 1;
    MY_HD="${1}"; shift
    MY_HOSTNAME="${1}"; shift
    if [ -e '/usr/share/kvm/pxe-virtio.bin' ]; then
      MY_OPTION_RESOURCE='-option-rom /usr/share/kvm/pxe-virtio.bin'
    elif [ -e '/usr/share/qemu/pxe-virtio.rom' ]; then
      MY_OPTION_RESOURCE='-option-rom /usr/share/qemu/pxe-virtio.rom'
    else
      echo "ERROR: Missing 'pxe-virtio.bin' file" && exit 1
    fi
    MY_OPTION_BOOT='-boot n -no-reboot'
    ;;

  'vnc')
    gvncviewer ${1:-localhost:0}
    exit $?
    ;;

  'start')
    sudo start qemu-kvm
    exit $?
    ;;

  'stop')
    sudo stop qemu-kvm
    exit $?
    ;;

  'help'|'-help'|'--help'|'-h')
    _help
    exit 1
    ;;

  *)
    echo "ERROR: Invalid mode (${MY_MODE})" >&2 && exit 1
    ;;

esac

# KVM parameters
MY_HD_FORMAT="${MY_HD##*.}"; [ -z "${MY_HD_FORMAT}" -o "${MY_HD_FORMAT}" == "${MY_HD}" ] && MY_HD_FORMAT='raw';
MY_KVM="kvm -drive file=${MY_HD},if=virtio,media=disk,format=${MY_HD_FORMAT},index=0,boot=on"

# Network settings
if [ -n "${MY_HOSTNAME}" ]; then
  # IP address and FQHN
  if [ -n "$(echo "${MY_HOSTNAME}" | egrep '^[0-9]{2,3}(\.[0-9]{1,3}){3}$')" ]; then
    MY_IPADDRESS="${MY_HOSTNAME}"
  else
    MY_DNSLOOKUP="$(getent ahosts ${MY_HOSTNAME} | egrep '^[0-9]{2,3}(\.[0-9]{1,3}){3}\s{1,}STREAM'| head -n 1)"
    [ -z "${MY_DNSLOOKUP}" ] && echo "ERROR: No matching DNS entry for the given hostname (${MY_HOSTNAME})" >&2 && exit 1
    MY_IPADDRESS="$(echo "${MY_DNSLOOKUP}" | awk '{print $1}')"
    [ -z "$(echo "${MY_IPADDRESS}" | egrep '^[0-9]{2,3}(\.[0-9]{1,3}){3}$')" ] && echo "ERROR: Invalid IP address (${MY_IPADDRESS})" >&2 && exit 1
  fi
  MY_HOSTFQHN="$(getent ahosts ${MY_HOSTNAME} | egrep 'STREAM\s{1,}.{1,}$'| head -n 1 | awk '{print $3}')"
  [ -z "$(echo "${MY_HOSTFQHN}" | egrep '^([-_a-z0-9]{1,}\.){2,}[a-z]{2,4}$')" ] && echo "WARNING: Invalid fully-qualified host name (${MY_HOSTFQHN})" >&2
  MY_IPADDRESS_A=${MY_IPADDRESS%%.*}; MY_IPADDRESS=${MY_IPADDRESS#*.}
  MY_IPADDRESS_B=${MY_IPADDRESS%%.*}; MY_IPADDRESS=${MY_IPADDRESS#*.}
  MY_IPADDRESS_C=${MY_IPADDRESS%%.*}; MY_IPADDRESS=${MY_IPADDRESS#*.}
  MY_IPADDRESS_D=${MY_IPADDRESS%%.*}; MY_IPADDRESS=${MY_IPADDRESS_A}.${MY_IPADDRESS_B}.${MY_IPADDRESS_C}.${MY_IPADDRESS_D}

  # MAC address
  MY_MACADDRESS="$(printf '02:00:%.2X:%.2X:%.2X:%.2X' ${MY_IPADDRESS_A} ${MY_IPADDRESS_B} ${MY_IPADDRESS_C} ${MY_IPADDRESS_D})"
  [ -z "$(echo "${MY_MACADDRESS}" | egrep '^[A-F0-9]{2}(:[A-F0-9]{2}){5}$')" ] && echo "ERROR: Invalid MAC address (${MY_MACADDRESS})" >&2 && exit 1

  # Network interface
  MY_INTERFACES=''
  if [ -r ~/.kvm/network.cfg ]; then
    for network_interfaces in $(sed 's/#.*//g;s/  *$//' ~/.kvm/network.cfg | grep -v '^$'); do
      network=${network_interfaces%%:*}; interfaces=${network_interfaces##*:}
      [ -n "$(echo ${MY_IPADDRESS} | grep "^${network//./\\.}")" ] && MY_INTERFACES=${interfaces} && break
    done
  else
    echo "WARNING: Missing/unreadable network configuration file (~/.kvm/network.cfg)" >&2
  fi
  if [ -n "${MY_INTERFACES}" ]; then
    for interface in $(echo ${MY_INTERFACES} | tr ',' '\n'); do
      [ -z "$(pgrep -f "ifname=${interface}")" ] && MY_INTERFACE=${interface} && break
    done
  else
    [ "${MY_MODE}" != 'info' ] && echo "ERROR: No matching network for IP range/address (${MY_IPADDRESS})" >&2 && exit 1;
  fi
  [ -z "${MY_INTERFACE}" -a "${MY_MODE}" != 'info' ] && echo "ERROR: No available interface among configured ones (${MY_INTERFACES})" >&2 && exit 1;

  # UUID
  MY_UUID="00000000-0000-0000-0000-${MY_MACADDRESS//:/}"

  # Info mode?
  if [ "${MY_MODE}" == 'info' ]; then
    cat << EOF
HOST INFORMATION:
 - host name: .... ${MY_HOSTFQHN}
 - IP address: ... ${MY_IPADDRESS}
 - MAC address: .. ${MY_MACADDRESS}
 - interface: .... ${MY_INTERFACE}
 - UUID: ......... ${MY_UUID}
EOF
    exit 0
  fi

  # KVM parameters
  MY_KVM="${MY_KVM} -uuid ${MY_UUID} -net nic,model=virtio,macaddr=${MY_MACADDRESS} -net tap,ifname=${MY_INTERFACE},script=no,downscript=no"
fi

# Options
MY_OPTIONS=''
MY_OPTION_MEMORY='-m 1024'
MY_OPTION_RTC='-rtc base=utc'
MY_OPTION_VNC='-vnc localhost:0'
while [ -n "${1}" ]; do
  case "${1}" in
    '-boot') MY_OPTION_BOOT='';;
    '-m') MY_OPTION_MEMORY='';;
    '-rtc') MY_OPTION_RTC='';;
    '-vnc') MY_OPTION_VNC='';;
  esac
  MY_OPTIONS="${MY_OPTIONS} ${1}"
  shift
done
MY_OPTIONS="${MY_OPTION_RESOURCE} ${MY_OPTION_BOOT} ${MY_OPTION_MEMORY} ${MY_OPTION_RTC} ${MY_OPTION_VNC} ${MY_OPTIONS}"
MY_KVM="${MY_KVM} ${MY_OPTIONS}"

# KVM start
[ -z "$(lsmod | fgrep kvm)" ] && echo "ERROR: KVM kernel modules are not loaded" >&2 &&  exit 1
echo "${MY_KVM}" >&2
echo 'PRESS <ENTER> TO CONTINUE, <CTRL+C> To ABORT...' >&2
read
eval "${MY_KVM}"

