#!/usr/bin/env python3

# Modules
# ... deb: python3-bernhard
import argparse
import bernhard
import sys

class CRiemannQueryClient:
    """
    Riemann Query Client
    """

    #------------------------------------------------------------------------------
    # CONSTRUCTORS / DESTRUCTOR
    #------------------------------------------------------------------------------

    def __init__(self):
        self.oArgumentParser = None
        self.oArguments = None
        self.__initArgumentParser()


    def __initArgumentParser(self):
        """
        Creates the arguments parser (and help generator)
        """

        # Create argument parser
        self.oArgumentParser = argparse.ArgumentParser('Riemann Query Client')

        # ... query
        self.oArgumentParser.add_argument('query', type=str,
                                          metavar='<query>',
                                          help='Query (filter)')

        # ... host
        self.oArgumentParser.add_argument('-H', '--host', type=str,
                                          default='localhost',
                                          metavar='<hostname>',
                                          help='Host name or IP address (default:localhost)')

        # ... port
        self.oArgumentParser.add_argument('-P', '--port', type=int,
                                          default=5555,
                                          metavar='<port>',
                                          help='Host TCP port (default:5555)')


    def __initArguments(self, _aArguments=None):
        """
        Parses the command-line arguments
        """

        # Parse arguments
        if _aArguments is None:
            _aArguments = sys.argv
        try:
            self.oArguments = self.oArgumentParser.parse_args()
        except Exception as e:
            self.oArguments = None
            raise RuntimeError('ERROR: Failed to parse arguments; %s' % str(e))


    def execute(self):
        """
        Executes the query
        """

        # Initialize
        # ... arguments
        self.__initArguments()

        # Execute
        oRiemann = bernhard.Client(host=self.oArguments.host, port=self.oArguments.port)
        oQuery = oRiemann.query(self.oArguments.query)
        for oEvent in oQuery:
            sys.stdout.write('%s %s %f\n' % (oEvent.host, oEvent.service, oEvent.metric_d))

# Main
if(__name__=='__main__'):
    oRiemannQueryClient = CRiemannQueryClient()
    try:
        oRiemannQueryClient.execute()
    except Exception as e:
        sys.stderr.write('%s\n' % str(e))
        sys.exit(1)

