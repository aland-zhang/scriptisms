#!/usr/bin/env python3

# Modules
# ... deb: python3-bernhard
import argparse
import bernhard
import json
import sys

class CRiemannQueryClient:
    """
    Riemann Query Client
    """

    #------------------------------------------------------------------------------
    # CONSTRUCTORS / DESTRUCTOR
    #------------------------------------------------------------------------------

    def __init__(self):
        self.oArgumentParser = None
        self.oArguments = None
        self.__initArgumentParser()


    def __initArgumentParser(self):
        """
        Creates the arguments parser (and help generator)
        """

        # Create argument parser
        self.oArgumentParser = argparse.ArgumentParser('Riemann Query Client')

        # ... query
        self.oArgumentParser.add_argument('query', type=str,
                                          metavar='<query>',
                                          help='Query (REF: https://github.com/riemann/riemann/blob/master/resources/query.g4)')

        # ... host
        self.oArgumentParser.add_argument('-H', '--host', type=str,
                                          default='localhost',
                                          metavar='<hostname>',
                                          help='Host name or IP address (default:localhost)')

        # ... port
        self.oArgumentParser.add_argument('-P', '--port', type=int,
                                          default=0,
                                          metavar='<port>',
                                          help='Host TCP port (default:5555 for PLAIN, 5554 for SSL)')

        # ... SSL certificate
        self.oArgumentParser.add_argument('--cert', type=str,
                                          metavar='<certificate>',
                                          help='Path to certificate (PEM) file')

        # ... SSL private key
        self.oArgumentParser.add_argument('--key', type=str,
                                          metavar='<private-key>',
                                          help='Path to private key (PEM) file')

        # ... SSL CA bundle
        self.oArgumentParser.add_argument('--ca', type=str,
                                          metavar='<CA-bundle>',
                                          help='Path to Certification Authorities bundle (PEM) file')

        # ... JSON output
        self.oArgumentParser.add_argument('--json',
                                          default=False,
                                          action='store_true',
                                          help='Output full JSON-formatted events')


    def __initArguments(self, _aArguments=None):
        """
        Parses the command-line arguments
        """

        # Parse arguments
        if _aArguments is None:
            _aArguments = sys.argv
        try:
            self.oArguments = self.oArgumentParser.parse_args()
        except Exception as e:
            self.oArguments = None
            raise RuntimeError('ERROR: Failed to parse arguments; %s' % str(e))


    def execute(self):
        """
        Executes the query
        """

        # Initialize
        # ... arguments
        self.__initArguments()

        # Execute
        if self.oArguments.cert or self.oArguments.key or self.oArguments.ca:
            iPort = self.oArguments.port if self.oArguments.port > 0 else 5554
            oRiemann = bernhard.SSLClient(
                host=self.oArguments.host, port=iPort,
                certfile=self.oArguments.cert, keyfile=self.oArguments.key,
                ca_certs=self.oArguments.ca,
            )
        else:
            iPort = self.oArguments.port if self.oArguments.port > 0 else 5555
            oRiemann = bernhard.Client(host=self.oArguments.host, port=iPort)
        oQuery = oRiemann.query(self.oArguments.query)
        for oEvent in oQuery:
            if self.oArguments.json:
                dEvent = {
                    'host': oEvent.host,
                    'service': oEvent.service,
                    'time': oEvent.time,
                    'state': oEvent.state,
                    'ttl': oEvent.ttl,
                }
                if(oEvent.attributes):
                    dEvent['attributes'] = {}
                    for oAttr in oEvent.attributes:
                        dEvent['attributes'][oAttr.key] = oAttr.value
                if(oEvent.tags):
                    dEvent['tags'] = [ str(a).strip(' "') for a in oEvent.tags ]
                sys.stdout.write('%s\n' % json.dumps(dEvent, indent=2))
            else:
                sys.stdout.write('%s %s %f\n' % (oEvent.host, oEvent.service, oEvent.metric_d))

# Main
if(__name__=='__main__'):
    oRiemannQueryClient = CRiemannQueryClient()
    try:
        oRiemannQueryClient.execute()
    except Exception as e:
        sys.stderr.write('%s\n' % str(e))
        sys.exit(1)

