#!/bin/bash
# REF: https://github.com/cedric-dufour/scriptisms/blob/master/system/ramvault
SCRIPT="${0##*/}"
VERSION='1.0.20191124a'


## Helpers
function _INFO {
  [ -n "${OPT_VERBOSE}" ] && echo "INFO[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: ${1}"
  return 0
}
function _WARNING {
  echo "WARNING[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: ${1}" >&2
  return 0
}
function _ERROR {
  echo "ERROR[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: ${1}" >&2
  return 0
}


## Usage
[ $# -lt 1 -o "${1##*-}" == 'help' ] && cat >&2 << EOF && exit 1
USAGE: ${SCRIPT} [<options>] {start|stop}

SYNOPSIS:
  Mount a limited-access TMPFS (start) and secure-wipe its content before
  unmounting it (stop).

OPTIONS:

  -M, --mountpoint <path>
    TMPFS mountpoint (default: /ram/vault/<UID>)

  -U, --uid <UID>
    User UID (default: root)

  -S, --size <size> [MiB]
    TMPFS size; see 'man tmpfs' for formatting (default: 10)

  -E, --encrypt
    Use LUKS to encrypt the underlying device
    WARNING: anyone able to read the kernel memory will be able
    to recover the encryption key from it!

WARNING:
  The security of the RAM vault depends entirely on how the kernel allocates
  the TMPFS memory. If this memory, at any time, is internally copied (by the
  kernel) to another location, then the secure-wiping of the original location
  will NOT take place.
  For that reason, in addition to prevent the RAM vault content being swapped
  to disk, all swap partitions are disabled before the RAM vault is started.
EOF

# Arguments
OPTS=()
OPT_MOUNTPOINT=
OPT_SIZE='10'
OPT_UID='root'
OPT_ENCRYPT=
OPT_VERBOSE="${VERBOSE}"
ARG_ACTION=
while [ -n "${1}" ]; do
  case "${1}" in
    '-M'|'--mountpoint')
      [ -z "${2}" ] && _ERROR "Missing option argument (${1})" && exit 1
      OPT_MOUNTPOINT="${2}"
      OPTS[${#OPTS[*]}]="${1}"; OPTS[${#OPTS[*]}]="${2}"; shift
      ;;
    '-U'|'--uid')
      [ -z "${2}" ] && _ERROR "Missing option argument (${1})" && exit 1
      OPT_UID="${2}"
      OPTS[${#OPTS[*]}]="${1}"; OPTS[${#OPTS[*]}]="${2}"; shift
      ;;
    '-S'|'--size')
      [ -z "${2}" ] && _ERROR "Missing option argument (${1})" && exit 1
      OPT_SIZE="${2}"
      shift
      ;;
    '-E'|'--encrypt')
      OPT_ENCRYPT='yes'
      ;;
    '--verbose')
      OPT_VERBOSE='yes'
      OPTS[${#OPTS[*]}]="${1}"
      ;;
    'version'|'--version')
      echo "${SCRIPT} ${VERSION}" && exit 0
      ;;
    'help'|'--help')
      "${0}" --help; exit 1
      ;;
    -*)
      _ERROR "Invalid option (${1})" && exit 1
      ;;
    *)
      if [ -z "${ARG_ACTION}" ]; then
        ARG_ACTION="${1}"
      else
        _ERROR "Too many arguments (${1})" && exit 1
      fi
      ;;
  esac
  shift
done
[ -z "${OPT_MOUNTPOINT}" ] && OPT_MOUNTPOINT="/ram/vault/${OPT_UID}"


## Check
[ "$(id -u)" != '0' ] && _ERROR "This utility must be run as root (sudo)" && exit 1
[ -z "$(which wipe)" ] && _ERROR "Missing the 'wipe' utility (apt-get install wipe)" && exit 1


## Vault
case "${ARG_ACTION}" in

  'start')
    # Mountpoint
    mountpoint -q "${OPT_MOUNTPOINT}" && _WARNING "RAM vault (TMPFS) is already started/mounted" && exit 0
    umask 022
    [ ! -e "${OPT_MOUNTPOINT}" ] && _INFO "Creating RAM vault mountpoint (${OPT_MOUNTPOINT})" && mkdir -p "${OPT_MOUNTPOINT}"
    [ ! -d "${OPT_MOUNTPOINT}" -o ! -w "${OPT_MOUNTPOINT}" ] && _ERROR "Invalid/unwritable RAM vault mountpoint (${OPT_MOUNTPOINT})" && exit 1
    umask 077

    # SWAP
    _INFO "Disabling SWAP"
    swapoff -a
    [ $? -ne 0 ] && _ERROR "Failed to disable SWAP" && "${0}" "${OPTS[@]}" stop && exit 1

    # TMPFS
    _INFO "Mounting the RAM vault TMPFS (${OPT_MOUNTPOINT}; size=${OPT_SIZE}m,mode=0700,uid=${OPT_UID},gid=nogroup)"
    mount -t tmpfs -o size=${OPT_SIZE}m,mode=0700,uid=${OPT_UID},gid=nogroup,noatime tmpfs "${OPT_MOUNTPOINT}"
    [ $? -ne 0 ] && _ERROR "Failed to mount RAM vault TMPFS" && "${0}" "${OPTS[@]}" stop && exit 1

    # LOOP/ENCRYPT
    if [ -z "${OPT_ENCRYPT}" ]; then
      RAM_DEV="$(losetup -f)"
      _INFO "Creating and attaching the RAM vault LOOP image/device (${RAM_DEV}: ${OPT_MOUNTPOINT}/IMAGE)"
      dd status=none if=/dev/zero of="${OPT_MOUNTPOINT}/IMAGE" 2>/dev/null
      losetup "${RAM_DEV}" "${OPT_MOUNTPOINT}/IMAGE"
      [ $? -ne 0 ] && _ERROR "Failed to create/attach the RAM vault LOOP image/device" && "${0}" "${OPTS[@]}" stop && exit 1
    else
      RAM_DEV="luks.$(echo "${OPT_MOUNTPOINT}" | md5sum | sed -nE 's|^(.{16}).*$|\1|p')"
      _INFO "Creating and attaching the RAM vault LUKS image/volume (${RAM_DEV}: ${OPT_MOUNTPOINT}/IMAGE)"
      dd status=none if=/dev/urandom of="${OPT_MOUNTPOINT}/KEY" bs=64 count=1 2>/dev/null
      dd status=none if=/dev/urandom of="${OPT_MOUNTPOINT}/IMAGE" 2>/dev/null
      cryptsetup luksFormat --batch-mode --type luks1 --key-file "${OPT_MOUNTPOINT}/KEY" "${OPT_MOUNTPOINT}/IMAGE"
      [ $? -ne 0 ] && _ERROR "Failed to create the RAM vault LUKS image/volume" && "${0}" "${OPTS[@]}" stop && exit 1
      cryptsetup luksOpen --key-file "${OPT_MOUNTPOINT}/KEY" "${OPT_MOUNTPOINT}/IMAGE" "${RAM_DEV}"
      [ $? -ne 0 ] && _ERROR "Failed to attach the RAM vault LUKS image/volume" && "${0}" "${OPTS[@]}" stop && exit 1
      _INFO "Secure-wiping the RAM vault LUKS volume key (${OPT_MOUNTPOINT}/KEY)"
      wipe ${VERBOSE:--s} -f -e "${OPT_MOUNTPOINT}/KEY"
      [ $? -ne 0 ] && _ERROR "Failed to secure-wipe the RAM vault LUKS volume key" && exit 1
      RAM_DEV="/dev/mapper/${RAM_DEV}"
    fi

    # EXT2
    _INFO "Creating and mounting the RAM vault EXT2 filesystem (${OPT_MOUNTPOINT}; mode=0700,uid=${OPT_UID},gid=nogroup)"
    mke2fs -t ext2 -L RAMVAULT -m 0 -q "${RAM_DEV}"
    [ $? -ne 0 ] && _ERROR "Failed create the RAM vault EXT2 filesystem" && "${0}" "${OPTS[@]}" stop && exit 1
    mount -t ext2 -o noatime "${RAM_DEV}" "${OPT_MOUNTPOINT}"
    [ $? -ne 0 ] && _ERROR "Failed mount the RAM vault EXT2 filesystem" && "${0}" "${OPTS[@]}" stop && exit 1
    chmod 700 "${OPT_MOUNTPOINT}"
    chown ${OPT_UID}:nogroup "${OPT_MOUNTPOINT}"

    # Done
    _INFO "RAM vault ready to use (${OPT_MOUNTPOINT})"
    echo "!!! DO NOT FORGET TO STOP THE VAULT TO SECURELY WIPE ITS CONTENT !!!"
    ;;

  'stop')
    w=0

    # EXT2
    if mountpoint -q "${OPT_MOUNTPOINT}" && [ ! -e "${OPT_MOUNTPOINT}/IMAGE" ]; then
      _INFO "Unmounting the RAM vault EXT2 filesystem (${OPT_MOUNTPOINT})"
      umount "${OPT_MOUNTPOINT}"
      [ $? -ne 0 ] && _WARNING "Failed to unmount the RAM vault EXT2 filesystem (${OPT_MOUNTPOINT})" && w=1
    fi

    # ENCRYPT
    RAM_DEV="luks.$(echo "${OPT_MOUNTPOINT}" | md5sum | sed -nE 's|^(.{16}).*$|\1|p')"
    if [ -e "/dev/mapper/${RAM_DEV}" ]; then
      _INFO "Detaching the RAM vault LUKS volume (${RAM_DEV})"
      cryptsetup luksClose "${RAM_DEV}"
      [ $? -ne 0 ] && _WARNING "Failed to detach the RAM vault LUKS volume (${RAM_DEV}: ${OPT_MOUNTPOINT}/IMAGE)" && w=1
    fi

    # LOOP
    RAM_DEV="$(losetup -nO NAME -j "${OPT_MOUNTPOINT}/IMAGE")"
    if [ -n "${RAM_DEV}" ]; then
      _INFO "Detaching the RAM vault LOOP device (${RAM_DEV})"
      losetup -d "${RAM_DEV}"
      [ $? -ne 0 ] && _WARNING "Failed to detach the RAM vault LOOP device (${RAM_DEV}: ${OPT_MOUNTPOINT}/IMAGE)" && w=1
    fi

    # Wipe
    if [ -e "${OPT_MOUNTPOINT}/IMAGE" ]; then
      _INFO "Secure-wiping the RAM vault image (${OPT_MOUNTPOINT}/IMAGE)"
      wipe -f -e "${OPT_MOUNTPOINT}/IMAGE"
      [ $? -ne 0 ] && _ERROR "Failed to secure-wipe the RAM vault image" && exit 1
    else
      _WARNING "Found no RAM vault image to secure-wipe" && w=1
    fi

    # TMPFS
    if mountpoint -q "${OPT_MOUNTPOINT}"; then
      _INFO "Unmounting the RAM vault TMPFS (${OPT_MOUNTPOINT})"
      umount "${OPT_MOUNTPOINT}"
      [ $? -ne 0 ] && _WARNING "Failed to unmount the RAM vault TMPFS (${OPT_MOUNTPOINT})" && w=1
    fi

    # SWAP
    _INFO "Enabling SWAP"
    swapon -a
    [ $? -ne 0 ] && _WARNING "Failed to (re-)enable SWAP" && w=1

    # Done
    if [ ${w} -ne 0 ]; then
      _WARNING "Failed to stop RAM vault properly"
    else
      _INFO "RAM vault stopped"
    fi
    ;;

    *)
    _ERROR "Invalid action (${ARG_ACTION:-<none>})" && exit 1
    ;;

esac


## DONE!
exit 0

