#!/bin/bash

## Usage
[ $# -lt 1 -o "${1##*-}" == "help" ] && cat << EOF >&2 && exit 1
USAGE: ${0##*/} <arubacx-backup.conf|arubacx-backup.d>

SYNOPSIS:
  Backup the startup and running configuration from ArubaOS-CX switches
  specified in the configuration file(s).

CONFIGURATION:
  The configuration file MUST define the following settings:
   - ARUBACX_BACKUP_CNF: the path to the file containing the hosts list
   - ARUBACX_BACKUP_DST: the directory to store the backup file(s) into
EOF

# Utilities
function _ERROR {
  echo "ERROR: $1" >&2
  echo "ERROR: $1 [STATUS:ERROR]"
}

function _WARNING {
  echo "WARNING: $1" >&2
  echo "WARNING: $1 [STATUS:WARNING]"
}

# Arguments
[ ! -r "${1}" ] && _ERROR "Invalid/missing backup configuration file (${1})" && exit 1
if [ $# -gt 1 ]; then
  while [ -n "${1}" ]; do
    ${0} ${1}
    shift
  done
  exit 0
fi
if [ -d "${1}" ]; then
  echo "================================================================================"
  echo "INFO: Spanning directory for backup tasks '${1}'"
  IFS=$'\n'; for f in $(find "${1}" -type f -name "*.conf" | sort); do
    ${0} ${f}
  done
  exit 0
fi

# Start banner
echo "--------------------------------------------------------------------------------"
echo "INFO: Performing backup for '${1}'"

# Parameters
ARUBACX_BACKUP_CNF=
ARUBACX_BACKUP_DST=
source "${1}"
ARUBACX_BACKUP_DST=${ARUBACX_BACKUP_DST%%/}
[ -z "${ARUBACX_BACKUP_CNF}" ] && _ERROR "Missing hosts file parameter (ARUBACX_BACKUP_CNF)" && exit 1
[ -z "${ARUBACX_BACKUP_DST}" ] && _ERROR "Missing backup destination parameter (ARUBACX_BACKUP_DST)" && exit 1
echo "INFO: to '${ARUBACX_BACKUP_DST}'"

# Get current process tree (for the backup log)
pid=$$
until [ ${pid} -eq 1 ]; do
  pid=$(ps --no-headers -o ppid -p ${pid})
  [ ${pid} -ne 1 ] && ppids="${ppids} ${pid}"
done

# Check ARUBACX configuration
[ ! -r "${ARUBACX_BACKUP_CNF}" ] && _ERROR "Missing/invalid hosts file configuration (${ARUBACX_BACKUP_CNF})" && exit 1

# Check backup destination
[ ! -e "${ARUBACX_BACKUP_DST}" ] && mkdir -p "${ARUBACX_BACKUP_DST}"
[ ! -d "${ARUBACX_BACKUP_DST}" ] && _ERROR "Invalid/missing backup directory (${ARUBACX_BACKUP_DST})" && exit 1
[ ! -w "${ARUBACX_BACKUP_DST}" ] && _ERROR "Cannot write to backup directory (${ARUBACX_BACKUP_DST})" && exit 1

# Log
ARUBACX_BACKUP_LOG="${ARUBACX_BACKUP_DST%%/}/arubacx-backup.log"
echo "INFO: with full log in '${ARUBACX_BACKUP_LOG}'"
echo '................................................................................'
rm -f "${ARUBACX_BACKUP_LOG}"
umask 027
cat << EOF | tee -a "${ARUBACX_BACKUP_LOG}"
HOST: $(uname -a)
COMMAND: $0 $*
BEGIN: $(date)
EOF
cat << EOF >> "${ARUBACX_BACKUP_LOG}"
PROC:
$(ps wf -o user,pid,start,time,command ${ppids})
EOF
cat << EOF | tee -a "${ARUBACX_BACKUP_LOG}"
MESG:
EOF

# Check lock
ARUBACX_BACKUP_LOCK="${ARUBACX_BACKUP_DST%%/}/arubacx-backup.lock"
[ -e "${ARUBACX_BACKUP_LOCK}" ] && _ERROR "Process already locked (${ARUBACX_BACKUP_LOCK})" | tee -a "${ARUBACX_BACKUP_LOG}" && exit 1

# Perform backup
ARUBACX_BACKUP_ERROR=0
touch "${ARUBACX_BACKUP_LOCK}"
for host in $(sed 's/\s*#.*//' "${ARUBACX_BACKUP_CNF}"); do
  [ -z "${host}" ] && continue
  dst="${ARUBACX_BACKUP_DST}/${host}" 
  ssh ${host} show startup-config > "${dst}.startup.cfg" 2>/dev/null
  [ $? -ne 0 ] && ARUBACX_BACKUP_ERROR=1 && continue
  ssh ${host} show running-config > "${dst}.running.cfg" 2>/dev/null
  [ $? -ne 0 ] && ARUBACX_BACKUP_ERROR=1 && continue
  ssh ${host} show events > "${dst}.event.log" 2>/dev/null
  [ $? -ne 0 ] && ARUBACX_BACKUP_ERROR=1 && continue
  echo "$(ls -aldh "${ARUBACX_BACKUP_DST}/${host}".*.{cfg,log})" | tee -a "${ARUBACX_BACKUP_LOG}"
done
rm "${ARUBACX_BACKUP_LOCK}"

# End
if [ ${ARUBACX_BACKUP_ERROR} -eq 0 ]; then
  echo "STATUS: OK [STATUS:OK]"  | tee -a "${ARUBACX_BACKUP_LOG}"
else
  echo "STATUS: ERROR [STATUS:ERROR]"  | tee -a "${ARUBACX_BACKUP_LOG}"
fi
echo "END: $(date)"  | tee -a "${ARUBACX_BACKUP_LOG}"
exit 0

