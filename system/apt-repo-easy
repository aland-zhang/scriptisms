#!/bin/bash
set -e

## Environment/defaults
: ${APT_REPO_ROOT:=/var/www/apt}
: ${APT_REPO_CODENAME:=$(lsb_release -sc)}
: ${APT_REPO_COMPONENT:=custom}
: ${APT_REPO_ARCHS:=$(dpkg --print-architecture)}
: ${APT_REPO_MAINTAINER:=$(getent passwd "$(whoami)" | cut -d: -f5) <$(whoami)@$(hostname -f)>}


## Usage
[ $# -lt 1 -o "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} <action> [<options>] [<package> ...]

SYNOPSIS:
  Easily manage a local APT repository

ACTIONS:
  publish
    Publish the given *.deb packages

  update
    Update the APT repository (Sources.* and Packages.* files)

  cleanup
    Clean-up the APT repository (old versions files)

OPTIONS:
  --root, -R <root>
    Root APT directory
    (default: ${APT_REPO_ROOT})

  --codename, -C <codename>
    Target codename (space-separated list for 'cleanup')
    (default: ${APT_REPO_CODENAME})

  --component, -c <component>
    Target component (space-separated list for 'cleanup')
    (default: ${APT_REPO_COMPONENT})

  --architecture, -A <architecture>
    Space-separated list of architecture(s)
    (default: ${APT_REPO_ARCHS})

  --maintainer, -M <e-mail>
    Maintainer e-mail address
    (default: ${APT_REPO_MAINTAINER})

  --source, -S
    Publish source (instead of binary) packages

  --cleanup
    Clean-up APT repository after publish
EOF

# Arguments
MY_ROOT="${APT_REPO_ROOT}"
MY_CODENAME="${APT_REPO_CODENAME}"
MY_COMPONENT="${APT_REPO_COMPONENT}"
MY_ARCHITECTURE="${APT_REPO_ARCHS}"
MY_MAINTAINER="${APT_REPO_MAINTAINER}"
MY_SOURCE=
MY_CLEANUP=
MY_ACTION=
MY_PACKAGES=()
while [ -n "${1}" ]; do
  case "${1}" in
    '--root'|'-R')
      [ -z "${2}" ] && echo "ERROR: Missing option argument (${1})" >&2 && exit 1
      MY_ROOT="${2}"; shift
      ;;
    '--codename'|'-C')
      [ -z "${2}" ] && echo "ERROR: Missing option argument (${1})" >&2 && exit 1
      MY_CODENAME="${2}"; shift
      ;;
    '--component'|'-c')
      [ -z "${2}" ] && echo "ERROR: Missing option argument (${1})" >&2 && exit 1
      MY_COMPONENT="${2}"; shift
      ;;
    '--architecture'|'-A')
      [ -z "${2}" ] && echo "ERROR: Missing option argument (${1})" >&2 && exit 1
      MY_ARCHITECTURE="${2}"; shift
      ;;
    '--maintainer'|'-M')
      [ -z "${2}" ] && echo "ERROR: Missing option argument (${1})" >&2 && exit 1
      MY_MAINTAINER="${2}"; shift
      ;;
    '--source'|'-S')
      MY_SOURCE='yes'
      ;;
    '--cleanup')
      MY_CLEANUP='yes'
      ;;
    -*)
      echo "ERROR: Invalid option (${1})" >&2 && exit 1
      ;;
    *)
      [ -z "${MY_ACTION}" ] && MY_ACTION="${1}" || MY_PACKAGES[${#MY_PACKAGES[*]}]="${1}"
  esac
  shift
done


## Action
case "${MY_ACTION}" in

  'publish')
    if [ -z "${MY_SOURCE}" ]; then
      for i in ${!MY_PACKAGES[*]}; do  # packages
        cp -v "${MY_PACKAGES[${i}]}" "${MY_ROOT}/dists/${MY_CODENAME}/${MY_COMPONENT}/binary/." || continue
      done  # packages
    else
      for i in ${!MY_PACKAGES[*]}; do  # packages
        cp -v "${MY_PACKAGES[${i}]}" "${MY_ROOT}/dists/${MY_CODENAME}/${MY_COMPONENT}/source/." || continue
      done  # packages
    fi

    # Update and clean-up APT repository
    [ -n "${MY_CLEANUP}" ] && "${0}" cleanup --root "${MY_ROOT}" --codename "${MY_CODENAME}" --component "${MY_COMPONENT}"
    "${0}" update --root "${MY_ROOT}" --codename "${MY_CODENAME}" --component "${MY_COMPONENT}"
    ;;

  'update')
    override_source="$(mktemp)"
    override_binary="$(mktemp)"
    trap "rm -f '${override_binary}' '${override_source}'" EXIT
    cd "${MY_ROOT}"
    root="$(pwd)"
    for codename in ${MY_CODENAME}; do  # codenames
      dist="dists/${codename}"

      for component in ${MY_COMPONENT}; do  # components
        comp="${dist}/${component}"
        [ ! -d "${comp}" ] && continue
        echo "[${root}/${comp}]"

        # Generate Sources files
        if [ -d "${comp}/source" ]; then
          for dsc in $(find "${comp}/source" -name '*.dsc'); do
            cat "${dsc}" \
            | awk -v SCT='optional' '{if($1 ~ "^Source:") SRC=$2; if($1 ~ "^Section:") SCT=$2}; END {printf "%s %s\n",SRC,SCT}'
          done \
          > "${override_source}"
          for dsc in $(find "${comp}/source" -name '*.dsc'); do
            cat "${dsc}" \
            | awk -v MAINT="${MY_MAINTAINER}" '{if(P && $1 ~ ":$") P=0; if($1=="Package-List:"){ P=1; next }; if(P) printf("%s %s %s %s\n",$1,$3,$4,MAINT)}'
          done \
          > "${override_binary}"
          apt-ftparchive sources "${comp}/source" "${override_binary}" --source-override "${override_source}" > "${comp}/source/Sources"
          cat "${comp}/source/Sources" | gzip -9 -c > "${comp}/source/Sources.gz"
          cat "${comp}/source/Sources" | bzip2 -9 -c > "${comp}/source/Sources.bz2"
          cat "${comp}/source/Sources" | xz -c > "${comp}/source/Sources.xz"
        fi

        # Generate Packages files
        for arch in ${MY_ARCHITECTURE}; do  # architectures
          if [ -d "${comp}/binary" -a -d "${comp}/binary-${arch}" ]; then
            for deb in $(find "${comp}/binary" \( -name '*_all.deb' -o -name "*_${arch}.deb" \)); do
              dpkg -I "${deb}" \
              | awk -v MAINT="${MY_MAINTAINER}" '{if($1 ~ "^Package:") PKG=$2; if($1 ~ "^Section:") SCT=$2; if($1 ~ "^Priority:") PRI=$2}; END {printf "%s %s %s %s\n",PKG,SCT,PRI,MAINT}'
            done \
            > "${override_binary}"
            apt-ftparchive packages --arch ${arch} "${comp}/binary" "${override_binary}" > "${comp}/binary-${arch}/Packages"
            cat "${comp}/binary-${arch}/Packages" | gzip -9 -c > "${comp}/binary-${arch}/Packages.gz"
            cat "${comp}/binary-${arch}/Packages" | bzip2 -9 -c > "${comp}/binary-${arch}/Packages.bz2"
            cat "${comp}/binary-${arch}/Packages" | xz -c > "${comp}/binary-${arch}/Packages.xz"
          fi
        done
      done  # components

      # Update Hash entries
      if [ -e "${dist}/Release.in" ]; then
        cat "${dist}/Release.in" > "${dist}/Release"
        apt-ftparchive release "${dist}" | fgrep -v Release >> "${dist}/Release"
      fi

    done  # codenames
    ;;

  'cleanup')
    IFS=$'\n'
    cd "${MY_ROOT}"
    root="$(pwd)"
    for codename in ${MY_CODENAME}; do  # codenames
      dist="dists/${codename}"

      for component in ${MY_COMPONENT}; do  # components
        comp="${dist}/${component}"
        [ ! -d "${comp}" ] && continue
        echo "[${root}/${comp}]"

        for duplicate in $(
          find "${root}/${comp}" -type f \( -name '*.deb' -o -name '*.dsc' \) \
          | sed -E 's#([^/]+)_[^_]+_([^_]+\.(deb|dsc))$#\1_%DUP%_\2#' \
          | sort | uniq -c \
          | awk '{if($1>1) print $0}' \
          | sed -E 's#^ *[0-9]+ ##'
        ); do  # duplicates
          i=0

          for deprecated in $(
            find "${MY_ROOT}" -type f -path "${duplicate//%DUP%/*}" \
            | sort -V -r
          ); do  # deprecateds
            i=$(( ${i}+1 ))
            [ ${i} -eq 1 ] && echo "CURRENT: ${deprecated}" && continue
            rm -i "${deprecated}"
          done  # deprecateds

        done  # duplicates

      done  # components

    done # codenames
    ;;

  *)
    echo "ERROR: Invalid action (${MY_ACTION})" >&2 && exit 1
    ;;

esac
